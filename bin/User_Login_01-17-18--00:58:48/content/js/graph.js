/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 0 : 0;
        var yOffset = options.yaxis.mode === "time" ? 0 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 234.0, "minX": 0.0, "maxY": 10363.0, "series": [{"data": [[0.0, 5071.0], [0.1, 5071.0], [0.2, 5740.0], [0.3, 5740.0], [0.4, 5762.0], [0.5, 5762.0], [0.6, 5762.0], [0.7, 5815.0], [0.8, 5823.0], [0.9, 5823.0], [1.0, 5964.0], [1.1, 5964.0], [1.2, 5993.0], [1.3, 5993.0], [1.4, 6026.0], [1.5, 6026.0], [1.6, 6026.0], [1.7, 6026.0], [1.8, 6051.0], [1.9, 6051.0], [2.0, 6062.0], [2.1, 6062.0], [2.2, 6093.0], [2.3, 6093.0], [2.4, 6132.0], [2.5, 6132.0], [2.6, 6140.0], [2.7, 6140.0], [2.8, 6140.0], [2.9, 6142.0], [3.0, 6142.0], [3.1, 6150.0], [3.2, 6150.0], [3.3, 6155.0], [3.4, 6155.0], [3.5, 6160.0], [3.6, 6160.0], [3.7, 6163.0], [3.8, 6163.0], [3.9, 6175.0], [4.0, 6175.0], [4.1, 6189.0], [4.2, 6189.0], [4.3, 6191.0], [4.4, 6191.0], [4.5, 6196.0], [4.6, 6196.0], [4.7, 6197.0], [4.8, 6197.0], [4.9, 6198.0], [5.0, 6198.0], [5.1, 6205.0], [5.2, 6205.0], [5.3, 6210.0], [5.4, 6210.0], [5.5, 6219.0], [5.6, 6219.0], [5.7, 6221.0], [5.8, 6221.0], [5.9, 6227.0], [6.0, 6227.0], [6.1, 6233.0], [6.2, 6233.0], [6.3, 6240.0], [6.4, 6240.0], [6.5, 6241.0], [6.6, 6241.0], [6.7, 6253.0], [6.8, 6253.0], [6.9, 6269.0], [7.0, 6269.0], [7.1, 6271.0], [7.2, 6271.0], [7.3, 6281.0], [7.4, 6281.0], [7.5, 6293.0], [7.6, 6293.0], [7.7, 6306.0], [7.8, 6306.0], [7.9, 6313.0], [8.0, 6313.0], [8.1, 6317.0], [8.2, 6317.0], [8.3, 6320.0], [8.4, 6320.0], [8.5, 6322.0], [8.6, 6322.0], [8.7, 6335.0], [8.8, 6337.0], [8.9, 6337.0], [9.0, 6341.0], [9.1, 6341.0], [9.2, 6354.0], [9.3, 6354.0], [9.4, 6356.0], [9.5, 6356.0], [9.6, 6358.0], [9.7, 6358.0], [9.8, 6363.0], [9.9, 6363.0], [10.0, 6368.0], [10.1, 6368.0], [10.2, 6368.0], [10.3, 6368.0], [10.4, 6370.0], [10.5, 6370.0], [10.6, 6385.0], [10.7, 6385.0], [10.8, 6390.0], [10.9, 6390.0], [11.0, 6404.0], [11.1, 6404.0], [11.2, 6409.0], [11.3, 6409.0], [11.4, 6410.0], [11.5, 6410.0], [11.6, 6410.0], [11.7, 6410.0], [11.8, 6414.0], [11.9, 6414.0], [12.0, 6421.0], [12.1, 6421.0], [12.2, 6421.0], [12.3, 6421.0], [12.4, 6425.0], [12.5, 6425.0], [12.6, 6427.0], [12.7, 6427.0], [12.8, 6430.0], [12.9, 6430.0], [13.0, 6434.0], [13.1, 6434.0], [13.2, 6478.0], [13.3, 6478.0], [13.4, 6483.0], [13.5, 6483.0], [13.6, 6483.0], [13.7, 6483.0], [13.8, 6488.0], [13.9, 6488.0], [14.0, 6500.0], [14.1, 6500.0], [14.2, 6508.0], [14.3, 6508.0], [14.4, 6510.0], [14.5, 6510.0], [14.6, 6554.0], [14.7, 6554.0], [14.8, 6595.0], [14.9, 6595.0], [15.0, 6603.0], [15.1, 6603.0], [15.2, 6609.0], [15.3, 6609.0], [15.4, 6614.0], [15.5, 6614.0], [15.6, 6625.0], [15.7, 6625.0], [15.8, 6630.0], [15.9, 6630.0], [16.0, 6637.0], [16.1, 6637.0], [16.2, 6640.0], [16.3, 6640.0], [16.4, 6643.0], [16.5, 6643.0], [16.6, 6649.0], [16.7, 6649.0], [16.8, 6657.0], [16.9, 6657.0], [17.0, 6660.0], [17.1, 6660.0], [17.2, 6661.0], [17.3, 6661.0], [17.4, 6671.0], [17.5, 6671.0], [17.6, 6675.0], [17.7, 6675.0], [17.8, 6682.0], [17.9, 6682.0], [18.0, 6690.0], [18.1, 6690.0], [18.2, 6709.0], [18.3, 6709.0], [18.4, 6712.0], [18.5, 6712.0], [18.6, 6723.0], [18.7, 6723.0], [18.8, 6731.0], [18.9, 6731.0], [19.0, 6734.0], [19.1, 6734.0], [19.2, 6735.0], [19.3, 6735.0], [19.4, 6736.0], [19.5, 6736.0], [19.6, 6740.0], [19.7, 6740.0], [19.8, 6744.0], [19.9, 6744.0], [20.0, 6748.0], [20.1, 6748.0], [20.2, 6767.0], [20.3, 6767.0], [20.4, 6777.0], [20.5, 6777.0], [20.6, 6796.0], [20.7, 6796.0], [20.8, 6801.0], [20.9, 6801.0], [21.0, 6803.0], [21.1, 6803.0], [21.2, 6804.0], [21.3, 6804.0], [21.4, 6807.0], [21.5, 6807.0], [21.6, 6812.0], [21.7, 6812.0], [21.8, 6817.0], [21.9, 6817.0], [22.0, 6818.0], [22.1, 6818.0], [22.2, 6824.0], [22.3, 6824.0], [22.4, 6825.0], [22.5, 6825.0], [22.6, 6830.0], [22.7, 6830.0], [22.8, 6835.0], [22.9, 6835.0], [23.0, 6840.0], [23.1, 6840.0], [23.2, 6845.0], [23.3, 6845.0], [23.4, 6845.0], [23.5, 6845.0], [23.6, 6857.0], [23.7, 6857.0], [23.8, 6861.0], [23.9, 6861.0], [24.0, 6877.0], [24.1, 6877.0], [24.2, 6902.0], [24.3, 6902.0], [24.4, 6918.0], [24.5, 6918.0], [24.6, 6934.0], [24.7, 6934.0], [24.8, 6950.0], [24.9, 6950.0], [25.0, 6959.0], [25.1, 6959.0], [25.2, 6960.0], [25.3, 6960.0], [25.4, 6979.0], [25.5, 6979.0], [25.6, 6993.0], [25.7, 6993.0], [25.8, 6996.0], [25.9, 6996.0], [26.0, 7002.0], [26.1, 7002.0], [26.2, 7003.0], [26.3, 7003.0], [26.4, 7018.0], [26.5, 7018.0], [26.6, 7021.0], [26.7, 7021.0], [26.8, 7022.0], [26.9, 7022.0], [27.0, 7025.0], [27.1, 7025.0], [27.2, 7037.0], [27.3, 7037.0], [27.4, 7040.0], [27.5, 7040.0], [27.6, 7047.0], [27.7, 7047.0], [27.8, 7057.0], [27.9, 7057.0], [28.0, 7059.0], [28.1, 7059.0], [28.2, 7084.0], [28.3, 7084.0], [28.4, 7085.0], [28.5, 7085.0], [28.6, 7087.0], [28.7, 7087.0], [28.8, 7089.0], [28.9, 7089.0], [29.0, 7089.0], [29.1, 7089.0], [29.2, 7107.0], [29.3, 7107.0], [29.4, 7111.0], [29.5, 7111.0], [29.6, 7125.0], [29.7, 7125.0], [29.8, 7133.0], [29.9, 7133.0], [30.0, 7138.0], [30.1, 7138.0], [30.2, 7160.0], [30.3, 7160.0], [30.4, 7161.0], [30.5, 7161.0], [30.6, 7164.0], [30.7, 7164.0], [30.8, 7166.0], [30.9, 7166.0], [31.0, 7174.0], [31.1, 7174.0], [31.2, 7176.0], [31.3, 7176.0], [31.4, 7185.0], [31.5, 7185.0], [31.6, 7185.0], [31.7, 7185.0], [31.8, 7188.0], [31.9, 7188.0], [32.0, 7196.0], [32.1, 7196.0], [32.2, 7199.0], [32.3, 7199.0], [32.4, 7208.0], [32.5, 7208.0], [32.6, 7210.0], [32.7, 7210.0], [32.8, 7217.0], [32.9, 7217.0], [33.0, 7222.0], [33.1, 7222.0], [33.2, 7226.0], [33.3, 7226.0], [33.4, 7228.0], [33.5, 7228.0], [33.6, 7229.0], [33.7, 7229.0], [33.8, 7242.0], [33.9, 7242.0], [34.0, 7243.0], [34.1, 7243.0], [34.2, 7282.0], [34.3, 7282.0], [34.4, 7283.0], [34.5, 7283.0], [34.6, 7297.0], [34.7, 7297.0], [34.8, 7301.0], [34.9, 7301.0], [35.0, 7316.0], [35.1, 7316.0], [35.2, 7335.0], [35.3, 7335.0], [35.4, 7341.0], [35.5, 7341.0], [35.6, 7359.0], [35.7, 7359.0], [35.8, 7363.0], [35.9, 7363.0], [36.0, 7368.0], [36.1, 7368.0], [36.2, 7401.0], [36.3, 7401.0], [36.4, 7404.0], [36.5, 7404.0], [36.6, 7416.0], [36.7, 7416.0], [36.8, 7417.0], [36.9, 7417.0], [37.0, 7429.0], [37.1, 7429.0], [37.2, 7440.0], [37.3, 7440.0], [37.4, 7441.0], [37.5, 7441.0], [37.6, 7446.0], [37.7, 7446.0], [37.8, 7446.0], [37.9, 7447.0], [38.0, 7447.0], [38.1, 7455.0], [38.2, 7455.0], [38.3, 7455.0], [38.4, 7455.0], [38.5, 7462.0], [38.6, 7462.0], [38.7, 7467.0], [38.8, 7467.0], [38.9, 7470.0], [39.0, 7470.0], [39.1, 7479.0], [39.2, 7479.0], [39.3, 7481.0], [39.4, 7481.0], [39.5, 7487.0], [39.6, 7487.0], [39.7, 7494.0], [39.8, 7494.0], [39.9, 7495.0], [40.0, 7495.0], [40.1, 7504.0], [40.2, 7504.0], [40.3, 7507.0], [40.4, 7507.0], [40.5, 7510.0], [40.6, 7510.0], [40.7, 7510.0], [40.8, 7510.0], [40.9, 7515.0], [41.0, 7515.0], [41.1, 7515.0], [41.2, 7515.0], [41.3, 7521.0], [41.4, 7521.0], [41.5, 7531.0], [41.6, 7531.0], [41.7, 7535.0], [41.8, 7535.0], [41.9, 7540.0], [42.0, 7540.0], [42.1, 7541.0], [42.2, 7541.0], [42.3, 7543.0], [42.4, 7543.0], [42.5, 7544.0], [42.6, 7544.0], [42.7, 7549.0], [42.8, 7549.0], [42.9, 7550.0], [43.0, 7550.0], [43.1, 7554.0], [43.2, 7554.0], [43.3, 7557.0], [43.4, 7557.0], [43.5, 7567.0], [43.6, 7567.0], [43.7, 7567.0], [43.8, 7567.0], [43.9, 7588.0], [44.0, 7588.0], [44.1, 7593.0], [44.2, 7593.0], [44.3, 7596.0], [44.4, 7596.0], [44.5, 7600.0], [44.6, 7600.0], [44.7, 7604.0], [44.8, 7604.0], [44.9, 7614.0], [45.0, 7614.0], [45.1, 7624.0], [45.2, 7624.0], [45.3, 7626.0], [45.4, 7626.0], [45.5, 7632.0], [45.6, 7632.0], [45.7, 7637.0], [45.8, 7637.0], [45.9, 7641.0], [46.0, 7641.0], [46.1, 7644.0], [46.2, 7644.0], [46.3, 7665.0], [46.4, 7665.0], [46.5, 7667.0], [46.6, 7667.0], [46.7, 7668.0], [46.8, 7668.0], [46.9, 7671.0], [47.0, 7671.0], [47.1, 7671.0], [47.2, 7671.0], [47.3, 7677.0], [47.4, 7677.0], [47.5, 7680.0], [47.6, 7680.0], [47.7, 7682.0], [47.8, 7682.0], [47.9, 7683.0], [48.0, 7683.0], [48.1, 7685.0], [48.2, 7685.0], [48.3, 7685.0], [48.4, 7685.0], [48.5, 7686.0], [48.6, 7686.0], [48.7, 7688.0], [48.8, 7688.0], [48.9, 7692.0], [49.0, 7692.0], [49.1, 7706.0], [49.2, 7706.0], [49.3, 7707.0], [49.4, 7707.0], [49.5, 7708.0], [49.6, 7708.0], [49.7, 7713.0], [49.8, 7713.0], [49.9, 7718.0], [50.0, 7718.0], [50.1, 7733.0], [50.2, 7733.0], [50.3, 7744.0], [50.4, 7744.0], [50.5, 7749.0], [50.6, 7749.0], [50.7, 7750.0], [50.8, 7750.0], [50.9, 7752.0], [51.0, 7752.0], [51.1, 7753.0], [51.2, 7753.0], [51.3, 7756.0], [51.4, 7756.0], [51.5, 7760.0], [51.6, 7760.0], [51.7, 7780.0], [51.8, 7780.0], [51.9, 7783.0], [52.0, 7783.0], [52.1, 7784.0], [52.2, 7784.0], [52.3, 7786.0], [52.4, 7786.0], [52.5, 7789.0], [52.6, 7789.0], [52.7, 7789.0], [52.8, 7789.0], [52.9, 7795.0], [53.0, 7795.0], [53.1, 7812.0], [53.2, 7812.0], [53.3, 7819.0], [53.4, 7819.0], [53.5, 7822.0], [53.6, 7822.0], [53.7, 7829.0], [53.8, 7829.0], [53.9, 7835.0], [54.0, 7835.0], [54.1, 7852.0], [54.2, 7852.0], [54.3, 7876.0], [54.4, 7876.0], [54.5, 7877.0], [54.6, 7877.0], [54.7, 7883.0], [54.8, 7883.0], [54.9, 7900.0], [55.0, 7900.0], [55.1, 7906.0], [55.2, 7906.0], [55.3, 7911.0], [55.4, 7911.0], [55.5, 7912.0], [55.6, 7912.0], [55.7, 7927.0], [55.8, 7927.0], [55.9, 7936.0], [56.0, 7936.0], [56.1, 7937.0], [56.2, 7937.0], [56.3, 7940.0], [56.4, 7940.0], [56.5, 7947.0], [56.6, 7947.0], [56.7, 7950.0], [56.8, 7950.0], [56.9, 7961.0], [57.0, 7961.0], [57.1, 7979.0], [57.2, 7979.0], [57.3, 7980.0], [57.4, 7980.0], [57.5, 7984.0], [57.6, 7984.0], [57.7, 7987.0], [57.8, 7987.0], [57.9, 7989.0], [58.0, 7989.0], [58.1, 7990.0], [58.2, 7990.0], [58.3, 7992.0], [58.4, 7992.0], [58.5, 7993.0], [58.6, 7993.0], [58.7, 7994.0], [58.8, 7994.0], [58.9, 7994.0], [59.0, 7994.0], [59.1, 7999.0], [59.2, 7999.0], [59.3, 8001.0], [59.4, 8001.0], [59.5, 8002.0], [59.6, 8002.0], [59.7, 8002.0], [59.8, 8002.0], [59.9, 8006.0], [60.0, 8006.0], [60.1, 8006.0], [60.2, 8006.0], [60.3, 8018.0], [60.4, 8018.0], [60.5, 8025.0], [60.6, 8025.0], [60.7, 8026.0], [60.8, 8026.0], [60.9, 8028.0], [61.0, 8028.0], [61.1, 8031.0], [61.2, 8031.0], [61.3, 8036.0], [61.4, 8036.0], [61.5, 8040.0], [61.6, 8040.0], [61.7, 8044.0], [61.8, 8044.0], [61.9, 8049.0], [62.0, 8049.0], [62.1, 8052.0], [62.2, 8052.0], [62.3, 8052.0], [62.4, 8052.0], [62.5, 8058.0], [62.6, 8058.0], [62.7, 8064.0], [62.8, 8064.0], [62.9, 8074.0], [63.0, 8074.0], [63.1, 8075.0], [63.2, 8075.0], [63.3, 8078.0], [63.4, 8078.0], [63.5, 8099.0], [63.6, 8099.0], [63.7, 8103.0], [63.8, 8103.0], [63.9, 8105.0], [64.0, 8105.0], [64.1, 8107.0], [64.2, 8107.0], [64.3, 8116.0], [64.4, 8116.0], [64.5, 8118.0], [64.6, 8118.0], [64.7, 8120.0], [64.8, 8120.0], [64.9, 8123.0], [65.0, 8123.0], [65.1, 8123.0], [65.2, 8123.0], [65.3, 8124.0], [65.4, 8124.0], [65.5, 8127.0], [65.6, 8127.0], [65.7, 8128.0], [65.8, 8128.0], [65.9, 8130.0], [66.0, 8130.0], [66.1, 8134.0], [66.2, 8134.0], [66.3, 8135.0], [66.4, 8135.0], [66.5, 8136.0], [66.6, 8136.0], [66.7, 8140.0], [66.8, 8140.0], [66.9, 8141.0], [67.0, 8141.0], [67.1, 8159.0], [67.2, 8159.0], [67.3, 8161.0], [67.4, 8161.0], [67.5, 8167.0], [67.6, 8167.0], [67.7, 8170.0], [67.8, 8170.0], [67.9, 8174.0], [68.0, 8174.0], [68.1, 8185.0], [68.2, 8185.0], [68.3, 8187.0], [68.4, 8187.0], [68.5, 8192.0], [68.6, 8192.0], [68.7, 8192.0], [68.8, 8192.0], [68.9, 8192.0], [69.0, 8192.0], [69.1, 8193.0], [69.2, 8193.0], [69.3, 8203.0], [69.4, 8203.0], [69.5, 8205.0], [69.6, 8205.0], [69.7, 8205.0], [69.8, 8205.0], [69.9, 8207.0], [70.0, 8207.0], [70.1, 8210.0], [70.2, 8210.0], [70.3, 8213.0], [70.4, 8213.0], [70.5, 8215.0], [70.6, 8215.0], [70.7, 8215.0], [70.8, 8215.0], [70.9, 8217.0], [71.0, 8217.0], [71.1, 8218.0], [71.2, 8218.0], [71.3, 8229.0], [71.4, 8229.0], [71.5, 8233.0], [71.6, 8233.0], [71.7, 8248.0], [71.8, 8248.0], [71.9, 8251.0], [72.0, 8251.0], [72.1, 8253.0], [72.2, 8253.0], [72.3, 8265.0], [72.4, 8265.0], [72.5, 8273.0], [72.6, 8273.0], [72.7, 8277.0], [72.8, 8277.0], [72.9, 8285.0], [73.0, 8285.0], [73.1, 8291.0], [73.2, 8291.0], [73.3, 8294.0], [73.4, 8294.0], [73.5, 8298.0], [73.6, 8298.0], [73.7, 8299.0], [73.8, 8299.0], [73.9, 8304.0], [74.0, 8304.0], [74.1, 8309.0], [74.2, 8309.0], [74.3, 8312.0], [74.4, 8312.0], [74.5, 8325.0], [74.6, 8325.0], [74.7, 8339.0], [74.8, 8339.0], [74.9, 8341.0], [75.0, 8341.0], [75.1, 8344.0], [75.2, 8344.0], [75.3, 8356.0], [75.4, 8356.0], [75.5, 8360.0], [75.6, 8360.0], [75.7, 8370.0], [75.8, 8370.0], [75.9, 8372.0], [76.0, 8372.0], [76.1, 8375.0], [76.2, 8375.0], [76.3, 8380.0], [76.4, 8380.0], [76.5, 8415.0], [76.6, 8415.0], [76.7, 8445.0], [76.8, 8445.0], [76.9, 8450.0], [77.0, 8450.0], [77.1, 8467.0], [77.2, 8467.0], [77.3, 8470.0], [77.4, 8470.0], [77.5, 8482.0], [77.6, 8482.0], [77.7, 8485.0], [77.8, 8485.0], [77.9, 8496.0], [78.0, 8496.0], [78.1, 8516.0], [78.2, 8516.0], [78.3, 8518.0], [78.4, 8518.0], [78.5, 8526.0], [78.6, 8526.0], [78.7, 8528.0], [78.8, 8528.0], [78.9, 8528.0], [79.0, 8528.0], [79.1, 8539.0], [79.2, 8539.0], [79.3, 8552.0], [79.4, 8552.0], [79.5, 8555.0], [79.6, 8555.0], [79.7, 8556.0], [79.8, 8556.0], [79.9, 8568.0], [80.0, 8568.0], [80.1, 8587.0], [80.2, 8587.0], [80.3, 8604.0], [80.4, 8604.0], [80.5, 8617.0], [80.6, 8617.0], [80.7, 8629.0], [80.8, 8629.0], [80.9, 8630.0], [81.0, 8630.0], [81.1, 8631.0], [81.2, 8631.0], [81.3, 8654.0], [81.4, 8654.0], [81.5, 8669.0], [81.6, 8669.0], [81.7, 8670.0], [81.8, 8670.0], [81.9, 8681.0], [82.0, 8681.0], [82.1, 8698.0], [82.2, 8698.0], [82.3, 8703.0], [82.4, 8703.0], [82.5, 8707.0], [82.6, 8707.0], [82.7, 8708.0], [82.8, 8708.0], [82.9, 8718.0], [83.0, 8718.0], [83.1, 8762.0], [83.2, 8762.0], [83.3, 8787.0], [83.4, 8787.0], [83.5, 8809.0], [83.6, 8809.0], [83.7, 8813.0], [83.8, 8813.0], [83.9, 8831.0], [84.0, 8831.0], [84.1, 8837.0], [84.2, 8837.0], [84.3, 8844.0], [84.4, 8844.0], [84.5, 8849.0], [84.6, 8849.0], [84.7, 8854.0], [84.8, 8854.0], [84.9, 8864.0], [85.0, 8864.0], [85.1, 8868.0], [85.2, 8868.0], [85.3, 8873.0], [85.4, 8873.0], [85.5, 8894.0], [85.6, 8894.0], [85.7, 8895.0], [85.8, 8895.0], [85.9, 8900.0], [86.0, 8900.0], [86.1, 8904.0], [86.2, 8904.0], [86.3, 8915.0], [86.4, 8915.0], [86.5, 8920.0], [86.6, 8920.0], [86.7, 8927.0], [86.8, 8927.0], [86.9, 8968.0], [87.0, 8968.0], [87.1, 8980.0], [87.2, 8980.0], [87.3, 8988.0], [87.4, 8988.0], [87.5, 9015.0], [87.6, 9015.0], [87.7, 9035.0], [87.8, 9035.0], [87.9, 9051.0], [88.0, 9051.0], [88.1, 9059.0], [88.2, 9059.0], [88.3, 9072.0], [88.4, 9072.0], [88.5, 9081.0], [88.6, 9081.0], [88.7, 9094.0], [88.8, 9094.0], [88.9, 9115.0], [89.0, 9115.0], [89.1, 9122.0], [89.2, 9122.0], [89.3, 9151.0], [89.4, 9151.0], [89.5, 9152.0], [89.6, 9152.0], [89.7, 9156.0], [89.8, 9156.0], [89.9, 9157.0], [90.0, 9157.0], [90.1, 9168.0], [90.2, 9168.0], [90.3, 9170.0], [90.4, 9170.0], [90.5, 9173.0], [90.6, 9173.0], [90.7, 9174.0], [90.8, 9174.0], [90.9, 9177.0], [91.0, 9177.0], [91.1, 9188.0], [91.2, 9188.0], [91.3, 9198.0], [91.4, 9198.0], [91.5, 9238.0], [91.6, 9238.0], [91.7, 9294.0], [91.8, 9294.0], [91.9, 9301.0], [92.0, 9301.0], [92.1, 9315.0], [92.2, 9315.0], [92.3, 9326.0], [92.4, 9326.0], [92.5, 9337.0], [92.6, 9337.0], [92.7, 9375.0], [92.8, 9375.0], [92.9, 9396.0], [93.0, 9396.0], [93.1, 9405.0], [93.2, 9405.0], [93.3, 9445.0], [93.4, 9445.0], [93.5, 9453.0], [93.6, 9453.0], [93.7, 9453.0], [93.8, 9453.0], [93.9, 9456.0], [94.0, 9456.0], [94.1, 9458.0], [94.2, 9458.0], [94.3, 9481.0], [94.4, 9481.0], [94.5, 9486.0], [94.6, 9486.0], [94.7, 9504.0], [94.8, 9504.0], [94.9, 9509.0], [95.0, 9509.0], [95.1, 9548.0], [95.2, 9548.0], [95.3, 9565.0], [95.4, 9565.0], [95.5, 9567.0], [95.6, 9567.0], [95.7, 9597.0], [95.8, 9597.0], [95.9, 9612.0], [96.0, 9612.0], [96.1, 9648.0], [96.2, 9648.0], [96.3, 9659.0], [96.4, 9659.0], [96.5, 9700.0], [96.6, 9700.0], [96.7, 9709.0], [96.8, 9709.0], [96.9, 9742.0], [97.0, 9742.0], [97.1, 9748.0], [97.2, 9748.0], [97.3, 9825.0], [97.4, 9825.0], [97.5, 9894.0], [97.6, 9894.0], [97.7, 9900.0], [97.8, 9900.0], [97.9, 9939.0], [98.0, 9939.0], [98.1, 9962.0], [98.2, 9962.0], [98.3, 9962.0], [98.4, 9962.0], [98.5, 9966.0], [98.6, 9966.0], [98.7, 10106.0], [98.8, 10106.0], [98.9, 10113.0], [99.0, 10113.0], [99.1, 10131.0], [99.2, 10131.0], [99.3, 10166.0], [99.4, 10166.0], [99.5, 10225.0], [99.6, 10225.0], [99.7, 10261.0], [99.8, 10261.0], [99.9, 10363.0], [100.0, 10363.0]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[0.0, 234.0], [0.1, 234.0], [0.2, 240.0], [0.3, 240.0], [0.4, 244.0], [0.5, 244.0], [0.6, 244.0], [0.7, 244.0], [0.8, 245.0], [0.9, 245.0], [1.0, 246.0], [1.1, 246.0], [1.2, 248.0], [1.3, 248.0], [1.4, 251.0], [1.5, 251.0], [1.6, 251.0], [1.7, 251.0], [1.8, 252.0], [1.9, 252.0], [2.0, 252.0], [2.1, 252.0], [2.2, 252.0], [2.3, 252.0], [2.4, 254.0], [2.5, 254.0], [2.6, 254.0], [2.7, 254.0], [2.8, 255.0], [2.9, 255.0], [3.0, 256.0], [3.1, 256.0], [3.2, 256.0], [3.3, 256.0], [3.4, 257.0], [3.5, 257.0], [3.6, 257.0], [3.7, 257.0], [3.8, 257.0], [3.9, 257.0], [4.0, 258.0], [4.1, 258.0], [4.2, 258.0], [4.3, 258.0], [4.4, 258.0], [4.5, 258.0], [4.6, 260.0], [4.7, 260.0], [4.8, 260.0], [4.9, 260.0], [5.0, 261.0], [5.1, 261.0], [5.2, 261.0], [5.3, 261.0], [5.4, 261.0], [5.5, 261.0], [5.6, 262.0], [5.7, 262.0], [5.8, 263.0], [5.9, 263.0], [6.0, 263.0], [6.1, 263.0], [6.2, 263.0], [6.3, 263.0], [6.4, 264.0], [6.5, 264.0], [6.6, 264.0], [6.7, 264.0], [6.8, 264.0], [6.9, 264.0], [7.0, 264.0], [7.1, 264.0], [7.2, 265.0], [7.3, 265.0], [7.4, 265.0], [7.5, 265.0], [7.6, 265.0], [7.7, 265.0], [7.8, 265.0], [7.9, 265.0], [8.0, 266.0], [8.1, 266.0], [8.2, 266.0], [8.3, 266.0], [8.4, 266.0], [8.5, 266.0], [8.6, 266.0], [8.7, 266.0], [8.8, 266.0], [8.9, 266.0], [9.0, 266.0], [9.1, 266.0], [9.2, 267.0], [9.3, 267.0], [9.4, 267.0], [9.5, 267.0], [9.6, 268.0], [9.7, 268.0], [9.8, 268.0], [9.9, 268.0], [10.0, 268.0], [10.1, 268.0], [10.2, 268.0], [10.3, 268.0], [10.4, 268.0], [10.5, 268.0], [10.6, 268.0], [10.7, 268.0], [10.8, 270.0], [10.9, 270.0], [11.0, 270.0], [11.1, 270.0], [11.2, 270.0], [11.3, 270.0], [11.4, 270.0], [11.5, 270.0], [11.6, 270.0], [11.7, 270.0], [11.8, 270.0], [11.9, 270.0], [12.0, 271.0], [12.1, 271.0], [12.2, 271.0], [12.3, 271.0], [12.4, 271.0], [12.5, 271.0], [12.6, 272.0], [12.7, 272.0], [12.8, 272.0], [12.9, 272.0], [13.0, 272.0], [13.1, 272.0], [13.2, 272.0], [13.3, 272.0], [13.4, 272.0], [13.5, 272.0], [13.6, 272.0], [13.7, 272.0], [13.8, 273.0], [13.9, 273.0], [14.0, 273.0], [14.1, 273.0], [14.2, 273.0], [14.3, 273.0], [14.4, 274.0], [14.5, 274.0], [14.6, 274.0], [14.7, 274.0], [14.8, 274.0], [14.9, 274.0], [15.0, 274.0], [15.1, 274.0], [15.2, 274.0], [15.3, 274.0], [15.4, 274.0], [15.5, 274.0], [15.6, 274.0], [15.7, 274.0], [15.8, 275.0], [15.9, 275.0], [16.0, 275.0], [16.1, 275.0], [16.2, 275.0], [16.3, 275.0], [16.4, 275.0], [16.5, 275.0], [16.6, 275.0], [16.7, 275.0], [16.8, 275.0], [16.9, 275.0], [17.0, 275.0], [17.1, 275.0], [17.2, 275.0], [17.3, 275.0], [17.4, 275.0], [17.5, 275.0], [17.6, 276.0], [17.7, 276.0], [17.8, 276.0], [17.9, 276.0], [18.0, 276.0], [18.1, 276.0], [18.2, 276.0], [18.3, 276.0], [18.4, 276.0], [18.5, 276.0], [18.6, 276.0], [18.7, 276.0], [18.8, 276.0], [18.9, 276.0], [19.0, 276.0], [19.1, 276.0], [19.2, 276.0], [19.3, 276.0], [19.4, 276.0], [19.5, 276.0], [19.6, 277.0], [19.7, 277.0], [19.8, 277.0], [19.9, 277.0], [20.0, 277.0], [20.1, 277.0], [20.2, 277.0], [20.3, 277.0], [20.4, 277.0], [20.5, 277.0], [20.6, 278.0], [20.7, 278.0], [20.8, 278.0], [20.9, 278.0], [21.0, 279.0], [21.1, 279.0], [21.2, 279.0], [21.3, 279.0], [21.4, 279.0], [21.5, 279.0], [21.6, 279.0], [21.7, 279.0], [21.8, 279.0], [21.9, 279.0], [22.0, 280.0], [22.1, 280.0], [22.2, 280.0], [22.3, 280.0], [22.4, 280.0], [22.5, 280.0], [22.6, 280.0], [22.7, 280.0], [22.8, 280.0], [22.9, 280.0], [23.0, 280.0], [23.1, 280.0], [23.2, 280.0], [23.3, 280.0], [23.4, 281.0], [23.5, 281.0], [23.6, 281.0], [23.7, 281.0], [23.8, 281.0], [23.9, 281.0], [24.0, 281.0], [24.1, 281.0], [24.2, 282.0], [24.3, 282.0], [24.4, 282.0], [24.5, 282.0], [24.6, 282.0], [24.7, 282.0], [24.8, 283.0], [24.9, 283.0], [25.0, 283.0], [25.1, 283.0], [25.2, 283.0], [25.3, 283.0], [25.4, 283.0], [25.5, 283.0], [25.6, 283.0], [25.7, 283.0], [25.8, 284.0], [25.9, 284.0], [26.0, 284.0], [26.1, 284.0], [26.2, 284.0], [26.3, 284.0], [26.4, 284.0], [26.5, 284.0], [26.6, 284.0], [26.7, 284.0], [26.8, 284.0], [26.9, 284.0], [27.0, 284.0], [27.1, 284.0], [27.2, 284.0], [27.3, 284.0], [27.4, 284.0], [27.5, 284.0], [27.6, 284.0], [27.7, 284.0], [27.8, 286.0], [27.9, 286.0], [28.0, 286.0], [28.1, 286.0], [28.2, 286.0], [28.3, 286.0], [28.4, 286.0], [28.5, 286.0], [28.6, 286.0], [28.7, 286.0], [28.8, 287.0], [28.9, 287.0], [29.0, 287.0], [29.1, 287.0], [29.2, 287.0], [29.3, 287.0], [29.4, 288.0], [29.5, 288.0], [29.6, 288.0], [29.7, 288.0], [29.8, 288.0], [29.9, 288.0], [30.0, 288.0], [30.1, 288.0], [30.2, 289.0], [30.3, 289.0], [30.4, 289.0], [30.5, 289.0], [30.6, 289.0], [30.7, 289.0], [30.8, 289.0], [30.9, 289.0], [31.0, 290.0], [31.1, 290.0], [31.2, 290.0], [31.3, 290.0], [31.4, 290.0], [31.5, 290.0], [31.6, 291.0], [31.7, 291.0], [31.8, 291.0], [31.9, 291.0], [32.0, 292.0], [32.1, 292.0], [32.2, 292.0], [32.3, 292.0], [32.4, 292.0], [32.5, 292.0], [32.6, 292.0], [32.7, 292.0], [32.8, 293.0], [32.9, 293.0], [33.0, 293.0], [33.1, 293.0], [33.2, 293.0], [33.3, 293.0], [33.4, 293.0], [33.5, 293.0], [33.6, 294.0], [33.7, 294.0], [33.8, 294.0], [33.9, 294.0], [34.0, 294.0], [34.1, 294.0], [34.2, 295.0], [34.3, 295.0], [34.4, 295.0], [34.5, 295.0], [34.6, 295.0], [34.7, 295.0], [34.8, 295.0], [34.9, 295.0], [35.0, 296.0], [35.1, 296.0], [35.2, 296.0], [35.3, 296.0], [35.4, 297.0], [35.5, 297.0], [35.6, 299.0], [35.7, 299.0], [35.8, 299.0], [35.9, 299.0], [36.0, 299.0], [36.1, 299.0], [36.2, 301.0], [36.3, 301.0], [36.4, 302.0], [36.5, 302.0], [36.6, 304.0], [36.7, 304.0], [36.8, 304.0], [36.9, 305.0], [37.0, 305.0], [37.1, 305.0], [37.2, 305.0], [37.3, 305.0], [37.4, 305.0], [37.5, 306.0], [37.6, 306.0], [37.7, 306.0], [37.8, 306.0], [37.9, 307.0], [38.0, 307.0], [38.1, 307.0], [38.2, 308.0], [38.3, 308.0], [38.4, 308.0], [38.5, 309.0], [38.6, 309.0], [38.7, 309.0], [38.8, 309.0], [38.9, 310.0], [39.0, 310.0], [39.1, 310.0], [39.2, 310.0], [39.3, 310.0], [39.4, 310.0], [39.5, 311.0], [39.6, 311.0], [39.7, 312.0], [39.8, 312.0], [39.9, 312.0], [40.0, 312.0], [40.1, 313.0], [40.2, 313.0], [40.3, 313.0], [40.4, 313.0], [40.5, 314.0], [40.6, 314.0], [40.7, 314.0], [40.8, 314.0], [40.9, 315.0], [41.0, 315.0], [41.1, 317.0], [41.2, 317.0], [41.3, 318.0], [41.4, 318.0], [41.5, 318.0], [41.6, 318.0], [41.7, 319.0], [41.8, 319.0], [41.9, 319.0], [42.0, 319.0], [42.1, 320.0], [42.2, 320.0], [42.3, 322.0], [42.4, 322.0], [42.5, 323.0], [42.6, 323.0], [42.7, 324.0], [42.8, 324.0], [42.9, 324.0], [43.0, 324.0], [43.1, 324.0], [43.2, 324.0], [43.3, 325.0], [43.4, 325.0], [43.5, 325.0], [43.6, 325.0], [43.7, 326.0], [43.8, 326.0], [43.9, 326.0], [44.0, 326.0], [44.1, 329.0], [44.2, 329.0], [44.3, 330.0], [44.4, 330.0], [44.5, 331.0], [44.6, 331.0], [44.7, 331.0], [44.8, 331.0], [44.9, 332.0], [45.0, 332.0], [45.1, 333.0], [45.2, 333.0], [45.3, 333.0], [45.4, 333.0], [45.5, 334.0], [45.6, 334.0], [45.7, 334.0], [45.8, 334.0], [45.9, 335.0], [46.0, 335.0], [46.1, 335.0], [46.2, 335.0], [46.3, 337.0], [46.4, 337.0], [46.5, 337.0], [46.6, 337.0], [46.7, 337.0], [46.8, 337.0], [46.9, 344.0], [47.0, 344.0], [47.1, 347.0], [47.2, 347.0], [47.3, 347.0], [47.4, 347.0], [47.5, 348.0], [47.6, 348.0], [47.7, 348.0], [47.8, 348.0], [47.9, 349.0], [48.0, 349.0], [48.1, 349.0], [48.2, 349.0], [48.3, 351.0], [48.4, 351.0], [48.5, 351.0], [48.6, 351.0], [48.7, 351.0], [48.8, 351.0], [48.9, 352.0], [49.0, 352.0], [49.1, 353.0], [49.2, 353.0], [49.3, 353.0], [49.4, 353.0], [49.5, 354.0], [49.6, 354.0], [49.7, 354.0], [49.8, 354.0], [49.9, 354.0], [50.0, 354.0], [50.1, 356.0], [50.2, 356.0], [50.3, 357.0], [50.4, 357.0], [50.5, 357.0], [50.6, 357.0], [50.7, 358.0], [50.8, 358.0], [50.9, 358.0], [51.0, 358.0], [51.1, 358.0], [51.2, 358.0], [51.3, 360.0], [51.4, 360.0], [51.5, 361.0], [51.6, 361.0], [51.7, 362.0], [51.8, 362.0], [51.9, 362.0], [52.0, 362.0], [52.1, 362.0], [52.2, 362.0], [52.3, 363.0], [52.4, 363.0], [52.5, 364.0], [52.6, 364.0], [52.7, 364.0], [52.8, 364.0], [52.9, 365.0], [53.0, 365.0], [53.1, 365.0], [53.2, 365.0], [53.3, 368.0], [53.4, 368.0], [53.5, 371.0], [53.6, 371.0], [53.7, 372.0], [53.8, 372.0], [53.9, 373.0], [54.0, 373.0], [54.1, 374.0], [54.2, 374.0], [54.3, 375.0], [54.4, 375.0], [54.5, 376.0], [54.6, 376.0], [54.7, 376.0], [54.8, 376.0], [54.9, 377.0], [55.0, 377.0], [55.1, 377.0], [55.2, 377.0], [55.3, 377.0], [55.4, 377.0], [55.5, 377.0], [55.6, 377.0], [55.7, 377.0], [55.8, 377.0], [55.9, 378.0], [56.0, 378.0], [56.1, 379.0], [56.2, 379.0], [56.3, 379.0], [56.4, 379.0], [56.5, 379.0], [56.6, 379.0], [56.7, 380.0], [56.8, 380.0], [56.9, 380.0], [57.0, 380.0], [57.1, 381.0], [57.2, 381.0], [57.3, 381.0], [57.4, 381.0], [57.5, 381.0], [57.6, 381.0], [57.7, 383.0], [57.8, 383.0], [57.9, 388.0], [58.0, 388.0], [58.1, 388.0], [58.2, 388.0], [58.3, 392.0], [58.4, 392.0], [58.5, 393.0], [58.6, 393.0], [58.7, 393.0], [58.8, 393.0], [58.9, 395.0], [59.0, 395.0], [59.1, 396.0], [59.2, 396.0], [59.3, 397.0], [59.4, 397.0], [59.5, 399.0], [59.6, 399.0], [59.7, 413.0], [59.8, 413.0], [59.9, 415.0], [60.0, 415.0], [60.1, 418.0], [60.2, 418.0], [60.3, 419.0], [60.4, 419.0], [60.5, 421.0], [60.6, 421.0], [60.7, 422.0], [60.8, 422.0], [60.9, 422.0], [61.0, 422.0], [61.1, 424.0], [61.2, 424.0], [61.3, 428.0], [61.4, 428.0], [61.5, 428.0], [61.6, 428.0], [61.7, 436.0], [61.8, 436.0], [61.9, 437.0], [62.0, 437.0], [62.1, 437.0], [62.2, 437.0], [62.3, 445.0], [62.4, 445.0], [62.5, 457.0], [62.6, 457.0], [62.7, 458.0], [62.8, 458.0], [62.9, 462.0], [63.0, 462.0], [63.1, 464.0], [63.2, 464.0], [63.3, 469.0], [63.4, 469.0], [63.5, 469.0], [63.6, 469.0], [63.7, 473.0], [63.8, 473.0], [63.9, 473.0], [64.0, 473.0], [64.1, 475.0], [64.2, 475.0], [64.3, 476.0], [64.4, 476.0], [64.5, 479.0], [64.6, 479.0], [64.7, 484.0], [64.8, 484.0], [64.9, 484.0], [65.0, 484.0], [65.1, 485.0], [65.2, 485.0], [65.3, 490.0], [65.4, 490.0], [65.5, 491.0], [65.6, 491.0], [65.7, 495.0], [65.8, 495.0], [65.9, 498.0], [66.0, 498.0], [66.1, 510.0], [66.2, 510.0], [66.3, 510.0], [66.4, 510.0], [66.5, 511.0], [66.6, 511.0], [66.7, 513.0], [66.8, 513.0], [66.9, 513.0], [67.0, 513.0], [67.1, 522.0], [67.2, 522.0], [67.3, 522.0], [67.4, 522.0], [67.5, 522.0], [67.6, 522.0], [67.7, 524.0], [67.8, 524.0], [67.9, 527.0], [68.0, 527.0], [68.1, 528.0], [68.2, 528.0], [68.3, 529.0], [68.4, 529.0], [68.5, 530.0], [68.6, 530.0], [68.7, 530.0], [68.8, 530.0], [68.9, 532.0], [69.0, 532.0], [69.1, 532.0], [69.2, 532.0], [69.3, 533.0], [69.4, 533.0], [69.5, 533.0], [69.6, 533.0], [69.7, 534.0], [69.8, 534.0], [69.9, 534.0], [70.0, 534.0], [70.1, 534.0], [70.2, 534.0], [70.3, 537.0], [70.4, 537.0], [70.5, 539.0], [70.6, 539.0], [70.7, 539.0], [70.8, 539.0], [70.9, 540.0], [71.0, 540.0], [71.1, 541.0], [71.2, 541.0], [71.3, 541.0], [71.4, 541.0], [71.5, 541.0], [71.6, 541.0], [71.7, 542.0], [71.8, 542.0], [71.9, 542.0], [72.0, 542.0], [72.1, 544.0], [72.2, 544.0], [72.3, 547.0], [72.4, 547.0], [72.5, 549.0], [72.6, 549.0], [72.7, 552.0], [72.8, 552.0], [72.9, 553.0], [73.0, 553.0], [73.1, 557.0], [73.2, 557.0], [73.3, 557.0], [73.4, 557.0], [73.5, 561.0], [73.6, 561.0], [73.7, 561.0], [73.8, 561.0], [73.9, 561.0], [74.0, 561.0], [74.1, 564.0], [74.2, 564.0], [74.3, 566.0], [74.4, 566.0], [74.5, 566.0], [74.6, 566.0], [74.7, 571.0], [74.8, 571.0], [74.9, 574.0], [75.0, 574.0], [75.1, 575.0], [75.2, 575.0], [75.3, 580.0], [75.4, 580.0], [75.5, 581.0], [75.6, 581.0], [75.7, 581.0], [75.8, 581.0], [75.9, 584.0], [76.0, 584.0], [76.1, 585.0], [76.2, 585.0], [76.3, 587.0], [76.4, 587.0], [76.5, 587.0], [76.6, 587.0], [76.7, 587.0], [76.8, 587.0], [76.9, 588.0], [77.0, 588.0], [77.1, 590.0], [77.2, 590.0], [77.3, 592.0], [77.4, 592.0], [77.5, 593.0], [77.6, 593.0], [77.7, 602.0], [77.8, 602.0], [77.9, 603.0], [78.0, 603.0], [78.1, 603.0], [78.2, 603.0], [78.3, 604.0], [78.4, 604.0], [78.5, 606.0], [78.6, 606.0], [78.7, 616.0], [78.8, 616.0], [78.9, 635.0], [79.0, 635.0], [79.1, 640.0], [79.2, 640.0], [79.3, 640.0], [79.4, 640.0], [79.5, 640.0], [79.6, 640.0], [79.7, 641.0], [79.8, 641.0], [79.9, 643.0], [80.0, 643.0], [80.1, 644.0], [80.2, 644.0], [80.3, 644.0], [80.4, 644.0], [80.5, 647.0], [80.6, 647.0], [80.7, 658.0], [80.8, 658.0], [80.9, 666.0], [81.0, 666.0], [81.1, 667.0], [81.2, 667.0], [81.3, 673.0], [81.4, 673.0], [81.5, 673.0], [81.6, 673.0], [81.7, 694.0], [81.8, 694.0], [81.9, 701.0], [82.0, 701.0], [82.1, 701.0], [82.2, 701.0], [82.3, 711.0], [82.4, 711.0], [82.5, 714.0], [82.6, 714.0], [82.7, 723.0], [82.8, 723.0], [82.9, 724.0], [83.0, 724.0], [83.1, 728.0], [83.2, 728.0], [83.3, 729.0], [83.4, 729.0], [83.5, 734.0], [83.6, 734.0], [83.7, 734.0], [83.8, 734.0], [83.9, 735.0], [84.0, 735.0], [84.1, 745.0], [84.2, 745.0], [84.3, 747.0], [84.4, 747.0], [84.5, 748.0], [84.6, 748.0], [84.7, 749.0], [84.8, 749.0], [84.9, 750.0], [85.0, 750.0], [85.1, 753.0], [85.2, 753.0], [85.3, 754.0], [85.4, 754.0], [85.5, 762.0], [85.6, 762.0], [85.7, 762.0], [85.8, 762.0], [85.9, 773.0], [86.0, 773.0], [86.1, 777.0], [86.2, 777.0], [86.3, 777.0], [86.4, 777.0], [86.5, 778.0], [86.6, 778.0], [86.7, 781.0], [86.8, 781.0], [86.9, 782.0], [87.0, 782.0], [87.1, 782.0], [87.2, 782.0], [87.3, 784.0], [87.4, 784.0], [87.5, 784.0], [87.6, 784.0], [87.7, 787.0], [87.8, 787.0], [87.9, 790.0], [88.0, 790.0], [88.1, 808.0], [88.2, 808.0], [88.3, 811.0], [88.4, 811.0], [88.5, 811.0], [88.6, 811.0], [88.7, 813.0], [88.8, 813.0], [88.9, 817.0], [89.0, 817.0], [89.1, 820.0], [89.2, 820.0], [89.3, 821.0], [89.4, 821.0], [89.5, 831.0], [89.6, 831.0], [89.7, 832.0], [89.8, 832.0], [89.9, 832.0], [90.0, 832.0], [90.1, 832.0], [90.2, 832.0], [90.3, 833.0], [90.4, 833.0], [90.5, 838.0], [90.6, 838.0], [90.7, 838.0], [90.8, 838.0], [90.9, 839.0], [91.0, 839.0], [91.1, 841.0], [91.2, 841.0], [91.3, 842.0], [91.4, 842.0], [91.5, 844.0], [91.6, 844.0], [91.7, 844.0], [91.8, 844.0], [91.9, 847.0], [92.0, 847.0], [92.1, 847.0], [92.2, 847.0], [92.3, 850.0], [92.4, 850.0], [92.5, 851.0], [92.6, 851.0], [92.7, 851.0], [92.8, 851.0], [92.9, 852.0], [93.0, 852.0], [93.1, 853.0], [93.2, 853.0], [93.3, 858.0], [93.4, 858.0], [93.5, 862.0], [93.6, 862.0], [93.7, 863.0], [93.8, 863.0], [93.9, 867.0], [94.0, 867.0], [94.1, 875.0], [94.2, 875.0], [94.3, 875.0], [94.4, 875.0], [94.5, 876.0], [94.6, 876.0], [94.7, 877.0], [94.8, 877.0], [94.9, 877.0], [95.0, 877.0], [95.1, 878.0], [95.2, 878.0], [95.3, 878.0], [95.4, 878.0], [95.5, 881.0], [95.6, 881.0], [95.7, 883.0], [95.8, 883.0], [95.9, 884.0], [96.0, 884.0], [96.1, 884.0], [96.2, 884.0], [96.3, 890.0], [96.4, 890.0], [96.5, 893.0], [96.6, 893.0], [96.7, 893.0], [96.8, 893.0], [96.9, 895.0], [97.0, 895.0], [97.1, 898.0], [97.2, 898.0], [97.3, 914.0], [97.4, 914.0], [97.5, 1058.0], [97.6, 1058.0], [97.7, 1075.0], [97.8, 1075.0], [97.9, 1076.0], [98.0, 1076.0], [98.1, 1086.0], [98.2, 1086.0], [98.3, 1090.0], [98.4, 1090.0], [98.5, 1095.0], [98.6, 1095.0], [98.7, 1103.0], [98.8, 1103.0], [98.9, 1104.0], [99.0, 1104.0], [99.1, 1109.0], [99.2, 1109.0], [99.3, 1123.0], [99.4, 1123.0], [99.5, 1155.0], [99.6, 1155.0], [99.7, 1160.0], [99.8, 1160.0], [99.9, 1666.0], [100.0, 1666.0]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 330.0, "series": [{"data": [[8500.0, 47.0], [9000.0, 36.0], [9500.0, 20.0], [5000.0, 1.0], [10000.0, 7.0], [5500.0, 6.0], [6000.0, 63.0], [6500.0, 60.0], [7000.0, 70.0], [7500.0, 96.0], [8000.0, 94.0]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[0.0, 330.0], [1500.0, 1.0], [500.0, 157.0], [1000.0, 12.0]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 10000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 48.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 501.0, "series": [{"data": [[1.0, 48.0]], "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[3.0, 378.0]], "isOverall": false, "label": "Requests in error", "isController": false}, {"data": [[0.0, 73.0]], "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[2.0, 501.0]], "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 347.5010330578513, "minX": 1.51615068E12, "maxY": 500.0, "series": [{"data": [[1.51615068E12, 500.0], [1.51615074E12, 347.5010330578513]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51615074E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 234.0, "minX": 1.0, "maxY": 10106.0, "series": [{"data": [[143.0, 9742.0], [150.0, 9396.0], [149.0, 9081.0], [159.0, 8631.0], [157.0, 8927.0], [156.0, 8539.0], [155.0, 9108.857142857141], [154.0, 9301.0], [153.0, 9539.666666666666], [167.0, 9894.0], [174.0, 8552.0], [170.0, 9509.0], [191.0, 9290.5], [189.0, 9481.0], [188.0, 8285.0], [194.0, 8207.0], [193.0, 9073.714285714286], [192.0, 8312.0], [224.0, 8654.0], [267.0, 9326.0], [264.0, 7992.0], [259.0, 8670.0], [283.0, 8193.0], [280.0, 9962.0], [277.0, 9962.0], [303.0, 8120.0], [302.0, 9337.0], [297.0, 7993.0], [295.0, 9375.0], [294.0, 7984.0], [292.0, 9042.5], [291.0, 9238.0], [319.0, 8893.6], [317.0, 10106.0], [316.0, 9504.0], [314.0, 9146.666666666666], [311.0, 9144.5], [309.0, 8423.666666666666], [306.0, 7994.0], [304.0, 9173.0], [330.0, 8099.0], [349.0, 7937.0], [338.0, 8900.0], [358.0, 8298.5], [357.0, 8531.5], [355.0, 8385.333333333334], [354.0, 8460.0], [419.0, 9017.555555555555], [463.0, 8701.0], [462.0, 8213.0], [461.0, 8451.5], [458.0, 9159.333333333334], [477.0, 8140.0], [476.0, 7811.5], [475.0, 7683.0], [473.0, 8276.25], [472.0, 7531.0], [471.0, 8402.375], [469.0, 9072.0], [464.0, 8217.0], [493.0, 8204.5], [492.0, 7204.0], [491.0, 7107.0], [490.0, 7658.5], [489.0, 8291.555555555555], [488.0, 7185.0], [486.0, 7718.0], [485.0, 7750.0], [482.0, 7199.0], [481.0, 8642.0], [500.0, 7124.8849557522135], [499.0, 7214.773584905661], [498.0, 7812.0], [497.0, 7923.714285714286], [496.0, 8043.351351351353]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[448.04999999999984, 7743.122000000001]], "isOverall": false, "label": "GenerateVerifiactionCode-Aggregated", "isController": false}, {"data": [[2.0, 284.0], [3.0, 264.0], [4.0, 261.0], [5.0, 273.0], [6.0, 265.0], [7.0, 268.0], [8.0, 277.0], [9.0, 276.0], [10.0, 277.0], [11.0, 276.0], [12.0, 277.0], [13.0, 276.0], [14.0, 252.0], [15.0, 251.0], [16.0, 261.0], [17.0, 245.0], [18.0, 283.0], [19.0, 277.0], [20.0, 263.0], [21.0, 284.0], [22.0, 271.0], [23.0, 290.0], [24.0, 290.0], [25.0, 276.0], [26.0, 260.0], [27.0, 276.0], [28.0, 276.0], [29.0, 274.0], [30.0, 270.0], [31.0, 275.0], [33.0, 284.0], [32.0, 275.0], [35.0, 283.0], [34.0, 263.0], [37.0, 275.0], [36.0, 282.0], [39.0, 280.0], [38.0, 280.0], [41.0, 274.0], [40.0, 254.0], [43.0, 272.0], [42.0, 280.0], [45.0, 256.0], [44.0, 258.0], [47.0, 266.0], [46.0, 244.0], [49.0, 322.0], [48.0, 295.0], [51.0, 281.0], [50.0, 295.0], [53.0, 280.0], [52.0, 309.0], [55.0, 265.0], [54.0, 274.0], [57.0, 280.0], [56.0, 292.0], [59.0, 281.0], [58.0, 257.0], [61.0, 275.0], [60.0, 248.0], [63.0, 240.0], [62.0, 284.0], [67.0, 268.0], [66.0, 272.0], [65.0, 258.0], [64.0, 274.0], [71.0, 284.0], [70.0, 254.0], [69.0, 264.0], [68.0, 266.0], [75.0, 256.0], [74.0, 282.0], [73.0, 257.0], [72.0, 284.0], [79.0, 271.0], [78.0, 275.0], [77.0, 252.0], [76.0, 252.0], [83.0, 274.0], [82.0, 279.0], [81.0, 251.0], [80.0, 276.0], [87.0, 270.0], [86.0, 273.0], [85.0, 272.0], [84.0, 271.0], [91.0, 258.0], [90.0, 268.0], [89.0, 262.0], [88.0, 263.0], [95.0, 270.0], [94.0, 272.0], [93.0, 274.0], [92.0, 274.0], [99.0, 264.0], [98.0, 280.0], [97.0, 266.0], [96.0, 270.0], [103.0, 246.0], [102.0, 268.0], [101.0, 273.0], [100.0, 234.0], [107.0, 292.0], [106.0, 288.0], [105.0, 284.0], [104.0, 279.0], [111.0, 260.0], [110.0, 261.0], [109.0, 275.0], [108.0, 278.0], [115.0, 284.0], [114.0, 308.0], [113.0, 290.0], [112.0, 296.0], [119.0, 275.0], [118.0, 283.0], [117.0, 292.0], [116.0, 299.0], [123.0, 266.0], [122.0, 265.0], [121.0, 266.0], [120.0, 284.0], [127.0, 313.0], [126.0, 314.0], [125.0, 267.0], [124.0, 265.0], [135.0, 304.0], [134.0, 349.0], [133.0, 354.0], [132.0, 335.0], [131.0, 311.0], [130.0, 337.0], [129.0, 324.0], [128.0, 317.0], [143.0, 364.0], [142.0, 334.0], [141.0, 380.0], [140.0, 380.0], [139.0, 348.0], [138.0, 393.0], [137.0, 365.0], [136.0, 393.0], [151.0, 289.0], [150.0, 413.0], [149.0, 371.0], [148.0, 436.0], [147.0, 377.0], [146.0, 376.0], [145.0, 415.0], [144.0, 362.0], [159.0, 541.0], [158.0, 286.0], [157.0, 287.0], [156.0, 544.0], [155.0, 270.0], [154.0, 421.0], [153.0, 428.0], [152.0, 291.0], [167.0, 590.0], [166.0, 522.0], [165.0, 530.0], [164.0, 279.0], [163.0, 257.0], [162.0, 527.0], [161.0, 266.0], [160.0, 539.0], [175.0, 510.0], [174.0, 272.0], [173.0, 540.0], [172.0, 475.0], [171.0, 293.0], [170.0, 602.0], [169.0, 484.0], [168.0, 522.0], [183.0, 286.0], [182.0, 553.0], [181.0, 490.0], [180.0, 513.0], [179.0, 264.0], [178.0, 542.0], [177.0, 510.0], [176.0, 270.0], [191.0, 641.0], [190.0, 643.0], [189.0, 294.0], [188.0, 714.0], [187.0, 701.0], [186.0, 283.0], [185.0, 537.0], [184.0, 286.0], [199.0, 1103.0], [198.0, 817.0], [197.0, 1123.0], [196.0, 1155.0], [195.0, 1104.0], [194.0, 1160.0], [193.0, 268.0], [192.0, 282.0], [207.0, 1109.0], [206.0, 1095.0], [205.0, 875.0], [204.0, 1086.0], [203.0, 782.0], [202.0, 784.0], [201.0, 782.0], [200.0, 1090.0], [215.0, 673.0], [214.0, 787.0], [213.0, 847.0], [212.0, 777.0], [211.0, 1075.0], [210.0, 1076.0], [209.0, 875.0], [208.0, 778.0], [223.0, 288.0], [222.0, 279.0], [221.0, 305.0], [220.0, 395.0], [219.0, 753.0], [218.0, 1058.0], [217.0, 762.0], [216.0, 811.0], [231.0, 358.0], [230.0, 318.0], [229.0, 333.0], [228.0, 379.0], [227.0, 255.0], [226.0, 276.0], [225.0, 375.0], [224.0, 310.0], [239.0, 294.0], [238.0, 325.0], [237.0, 344.0], [236.0, 334.0], [235.0, 281.0], [234.0, 287.0], [233.0, 286.0], [232.0, 361.0], [247.0, 275.0], [246.0, 319.0], [245.0, 278.0], [244.0, 295.0], [243.0, 292.0], [242.0, 331.0], [241.0, 333.0], [240.0, 295.0], [253.0, 808.0], [252.0, 694.0], [251.0, 283.0], [250.0, 326.0], [249.0, 312.0], [248.0, 301.0], [266.0, 884.0], [260.0, 378.0], [258.0, 379.0], [284.0, 422.0], [302.0, 893.0], [303.0, 673.0], [301.0, 581.0], [300.0, 581.0], [299.0, 893.0], [298.0, 881.0], [297.0, 883.0], [296.0, 616.0], [295.0, 877.0], [289.0, 914.0], [288.0, 878.0], [291.0, 584.0], [290.0, 890.0], [294.0, 898.0], [293.0, 587.0], [292.0, 593.0], [318.0, 640.0], [319.0, 753.1785714285713], [317.0, 571.0], [316.0, 647.0], [315.0, 561.0], [314.0, 877.0], [313.0, 566.0], [312.0, 574.0], [311.0, 635.0], [305.0, 603.0], [304.0, 575.0], [307.0, 895.0], [306.0, 867.0], [310.0, 604.0], [309.0, 878.0], [308.0, 876.0], [334.0, 777.0], [335.0, 748.0], [333.0, 747.0], [332.0, 781.0], [331.0, 750.0], [330.0, 773.0], [329.0, 469.0], [328.0, 557.0], [327.0, 784.0], [321.0, 838.0], [320.0, 815.5], [323.0, 832.6666666666666], [322.0, 851.0], [326.0, 790.0], [325.0, 539.0], [324.0, 522.0], [350.0, 734.0], [351.0, 729.0], [349.0, 495.0], [348.0, 484.0], [347.0, 437.0], [346.0, 734.0], [345.0, 485.0], [344.0, 745.0], [343.0, 754.0], [337.0, 735.0], [336.0, 469.0], [339.0, 762.0], [338.0, 464.0], [342.0, 458.0], [341.0, 728.0], [340.0, 445.0], [354.0, 513.0], [365.0, 724.0], [363.0, 723.0], [358.0, 667.0], [357.0, 473.0], [356.0, 424.0], [355.0, 462.0], [353.0, 711.0], [352.0, 749.0], [389.0, 457.0], [385.0, 437.0], [430.0, 297.0], [431.0, 299.0], [429.0, 585.0], [428.0, 288.0], [427.0, 289.0], [426.0, 511.0], [425.0, 293.0], [424.0, 323.0], [423.0, 302.0], [419.0, 393.7192982456141], [422.0, 314.0], [421.0, 318.0], [420.0, 326.0], [446.0, 640.0], [447.0, 541.0], [445.0, 534.0], [444.0, 557.0], [443.0, 580.0], [442.0, 592.0], [441.0, 588.0], [440.0, 587.0], [439.0, 587.0], [433.0, 310.0], [432.0, 293.0], [435.0, 289.0], [434.0, 491.0], [438.0, 287.0], [437.0, 307.0], [436.0, 276.0], [462.0, 473.0], [463.0, 418.0], [461.0, 476.0], [460.0, 479.0], [459.0, 498.0], [458.0, 530.0], [457.0, 524.0], [456.0, 561.0], [455.0, 532.0], [449.0, 534.0], [448.0, 532.0], [451.0, 528.0], [450.0, 534.0], [454.0, 533.0], [453.0, 529.0], [452.0, 533.0], [478.0, 315.0], [479.0, 312.0], [477.0, 332.0], [476.0, 330.0], [475.0, 331.0], [474.0, 294.0], [473.0, 329.0], [472.0, 305.0], [471.0, 374.0], [465.0, 383.0], [464.0, 399.0], [467.0, 379.0], [466.0, 363.0], [470.0, 376.0], [469.0, 377.0], [468.0, 381.0], [494.0, 284.0], [495.0, 275.0], [493.0, 268.0], [492.0, 280.0], [491.0, 286.0], [490.0, 299.0], [489.0, 272.0], [488.0, 307.0], [487.0, 293.0], [481.0, 309.0], [480.0, 289.0], [483.0, 277.0], [482.0, 306.0], [486.0, 291.0], [485.0, 267.0], [484.0, 305.0], [500.0, 1666.0], [499.0, 296.0], [498.0, 244.0], [497.0, 276.0], [496.0, 279.0], [1.0, 281.0]], "isOverall": false, "label": "verifyUser", "isController": false}, {"data": [[256.7120000000001, 457.08199999999994]], "isOverall": false, "label": "verifyUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 99.73333333333333, "minX": 1.51615068E12, "maxY": 7516.983333333334, "series": [{"data": [[1.51615068E12, 189.13333333333333], [1.51615074E12, 7516.983333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.51615068E12, 99.73333333333333], [1.51615074E12, 4333.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51615074E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 457.08199999999994, "minX": 1.51615068E12, "maxY": 7815.405982905981, "series": [{"data": [[1.51615068E12, 6685.96875], [1.51615074E12, 7815.405982905981]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[1.51615074E12, 457.08199999999994]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51615074E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 457.0659999999998, "minX": 1.51615068E12, "maxY": 7815.363247863253, "series": [{"data": [[1.51615068E12, 6685.937499999999], [1.51615074E12, 7815.363247863253]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[1.51615074E12, 457.0659999999998]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51615074E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 273.71799999999996, "minX": 1.51615068E12, "maxY": 3575.976495726495, "series": [{"data": [[1.51615068E12, 3561.5], [1.51615074E12, 3575.976495726495]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[1.51615074E12, 273.71799999999996]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51615074E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 264.0, "minX": 1.51615068E12, "maxY": 10363.0, "series": [{"data": [[1.51615068E12, 7912.0], [1.51615074E12, 10363.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.51615068E12, 5071.0], [1.51615074E12, 264.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.51615068E12, 7734.0], [1.51615074E12, 9029.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.51615068E12, 7912.0], [1.51615074E12, 10111.39]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.51615068E12, 7808.65], [1.51615074E12, 9455.55]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51615074E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 347.5, "minX": 0.0, "maxY": 7499.5, "series": [{"data": [[0.0, 6687.5], [16.0, 7499.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 347.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 16.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 347.5, "minX": 0.0, "maxY": 7499.5, "series": [{"data": [[0.0, 6687.5], [16.0, 7499.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 347.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 16.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.316666666666666, "minX": 1.51615068E12, "maxY": 8.35, "series": [{"data": [[1.51615068E12, 8.35], [1.51615074E12, 8.316666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51615074E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.51615068E12, "maxY": 16.133333333333333, "series": [{"data": [[1.51615068E12, 0.5333333333333333], [1.51615074E12, 16.133333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51615074E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.51615068E12, "maxY": 7.8, "series": [{"data": [[1.51615074E12, 2.033333333333333]], "isOverall": false, "label": "verifyUser-success", "isController": false}, {"data": [[1.51615068E12, 0.5333333333333333], [1.51615074E12, 7.8]], "isOverall": false, "label": "GenerateVerifiactionCode-success", "isController": false}, {"data": [[1.51615074E12, 6.3]], "isOverall": false, "label": "verifyUser-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51615074E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
