/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 0 : 0;
        var yOffset = options.yaxis.mode === "time" ? 0 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 259.0, "minX": 0.0, "maxY": 145359.0, "series": [{"data": [[0.0, 2170.0], [0.1, 2170.0], [0.2, 2170.0], [0.3, 2186.0], [0.4, 2186.0], [0.5, 2237.0], [0.6, 2237.0], [0.7, 2237.0], [0.8, 2379.0], [0.9, 2379.0], [1.0, 2433.0], [1.1, 2433.0], [1.2, 2433.0], [1.3, 2489.0], [1.4, 2489.0], [1.5, 2505.0], [1.6, 2505.0], [1.7, 2505.0], [1.8, 2506.0], [1.9, 2506.0], [2.0, 2540.0], [2.1, 2540.0], [2.2, 2540.0], [2.3, 2551.0], [2.4, 2551.0], [2.5, 2558.0], [2.6, 2558.0], [2.7, 2558.0], [2.8, 2591.0], [2.9, 2591.0], [3.0, 2595.0], [3.1, 2595.0], [3.2, 2595.0], [3.3, 2674.0], [3.4, 2674.0], [3.5, 2705.0], [3.6, 2705.0], [3.7, 2705.0], [3.8, 2706.0], [3.9, 2706.0], [4.0, 2712.0], [4.1, 2712.0], [4.2, 2712.0], [4.3, 2773.0], [4.4, 2773.0], [4.5, 2773.0], [4.6, 2773.0], [4.7, 2773.0], [4.8, 2801.0], [4.9, 2801.0], [5.0, 2805.0], [5.1, 2805.0], [5.2, 2805.0], [5.3, 2807.0], [5.4, 2807.0], [5.5, 2809.0], [5.6, 2809.0], [5.7, 2809.0], [5.8, 2819.0], [5.9, 2819.0], [6.0, 2822.0], [6.1, 2822.0], [6.2, 2822.0], [6.3, 2823.0], [6.4, 2823.0], [6.5, 2839.0], [6.6, 2839.0], [6.7, 2839.0], [6.8, 2840.0], [6.9, 2840.0], [7.0, 2842.0], [7.1, 2842.0], [7.2, 2842.0], [7.3, 2872.0], [7.4, 2872.0], [7.5, 2876.0], [7.6, 2876.0], [7.7, 2876.0], [7.8, 2891.0], [7.9, 2891.0], [8.0, 3023.0], [8.1, 3023.0], [8.2, 3023.0], [8.3, 3066.0], [8.4, 3066.0], [8.5, 3087.0], [8.6, 3087.0], [8.7, 3087.0], [8.8, 3142.0], [8.9, 3142.0], [9.0, 3150.0], [9.1, 3150.0], [9.2, 3150.0], [9.3, 3156.0], [9.4, 3156.0], [9.5, 3157.0], [9.6, 3157.0], [9.7, 3157.0], [9.8, 3164.0], [9.9, 3164.0], [10.0, 3165.0], [10.1, 3165.0], [10.2, 3172.0], [10.3, 3172.0], [10.4, 3172.0], [10.5, 3177.0], [10.6, 3177.0], [10.7, 3182.0], [10.8, 3182.0], [10.9, 3182.0], [11.0, 3198.0], [11.1, 3198.0], [11.2, 3207.0], [11.3, 3207.0], [11.4, 3207.0], [11.5, 3210.0], [11.6, 3210.0], [11.7, 3210.0], [11.8, 3210.0], [11.9, 3210.0], [12.0, 3212.0], [12.1, 3212.0], [12.2, 3214.0], [12.3, 3214.0], [12.4, 3214.0], [12.5, 3215.0], [12.6, 3215.0], [12.7, 3224.0], [12.8, 3224.0], [12.9, 3224.0], [13.0, 3268.0], [13.1, 3268.0], [13.2, 3274.0], [13.3, 3274.0], [13.4, 3274.0], [13.5, 3285.0], [13.6, 3285.0], [13.7, 3286.0], [13.8, 3286.0], [13.9, 3286.0], [14.0, 3302.0], [14.1, 3302.0], [14.2, 3326.0], [14.3, 3326.0], [14.4, 3326.0], [14.5, 3333.0], [14.6, 3333.0], [14.7, 3382.0], [14.8, 3382.0], [14.9, 3382.0], [15.0, 3384.0], [15.1, 3384.0], [15.2, 3401.0], [15.3, 3401.0], [15.4, 3401.0], [15.5, 3410.0], [15.6, 3410.0], [15.7, 3419.0], [15.8, 3419.0], [15.9, 3419.0], [16.0, 3431.0], [16.1, 3431.0], [16.2, 3432.0], [16.3, 3432.0], [16.4, 3432.0], [16.5, 3438.0], [16.6, 3438.0], [16.7, 3439.0], [16.8, 3439.0], [16.9, 3439.0], [17.0, 3462.0], [17.1, 3462.0], [17.2, 3475.0], [17.3, 3475.0], [17.4, 3475.0], [17.5, 3482.0], [17.6, 3482.0], [17.7, 3483.0], [17.8, 3483.0], [17.9, 3483.0], [18.0, 3493.0], [18.1, 3493.0], [18.2, 3503.0], [18.3, 3503.0], [18.4, 3503.0], [18.5, 3509.0], [18.6, 3509.0], [18.7, 3514.0], [18.8, 3514.0], [18.9, 3514.0], [19.0, 3524.0], [19.1, 3524.0], [19.2, 3533.0], [19.3, 3533.0], [19.4, 3533.0], [19.5, 3541.0], [19.6, 3541.0], [19.7, 3553.0], [19.8, 3553.0], [19.9, 3553.0], [20.0, 3562.0], [20.1, 3562.0], [20.2, 3564.0], [20.3, 3564.0], [20.4, 3564.0], [20.5, 3564.0], [20.6, 3564.0], [20.7, 3567.0], [20.8, 3567.0], [20.9, 3569.0], [21.0, 3569.0], [21.1, 3569.0], [21.2, 3575.0], [21.3, 3575.0], [21.4, 3575.0], [21.5, 3575.0], [21.6, 3575.0], [21.7, 3584.0], [21.8, 3584.0], [21.9, 3593.0], [22.0, 3593.0], [22.1, 3593.0], [22.2, 3604.0], [22.3, 3604.0], [22.4, 3617.0], [22.5, 3617.0], [22.6, 3617.0], [22.7, 3628.0], [22.8, 3628.0], [22.9, 3640.0], [23.0, 3640.0], [23.1, 3640.0], [23.2, 3640.0], [23.3, 3640.0], [23.4, 3647.0], [23.5, 3647.0], [23.6, 3647.0], [23.7, 3654.0], [23.8, 3654.0], [23.9, 3661.0], [24.0, 3661.0], [24.1, 3661.0], [24.2, 3668.0], [24.3, 3668.0], [24.4, 3673.0], [24.5, 3673.0], [24.6, 3673.0], [24.7, 3674.0], [24.8, 3674.0], [24.9, 3687.0], [25.0, 3687.0], [25.1, 3687.0], [25.2, 3698.0], [25.3, 3698.0], [25.4, 3700.0], [25.5, 3700.0], [25.6, 3700.0], [25.7, 3724.0], [25.8, 3724.0], [25.9, 3726.0], [26.0, 3726.0], [26.1, 3726.0], [26.2, 3727.0], [26.3, 3727.0], [26.4, 3727.0], [26.5, 3727.0], [26.6, 3727.0], [26.7, 3730.0], [26.8, 3730.0], [26.9, 3730.0], [27.0, 3730.0], [27.1, 3730.0], [27.2, 3732.0], [27.3, 3732.0], [27.4, 3736.0], [27.5, 3736.0], [27.6, 3736.0], [27.7, 3738.0], [27.8, 3738.0], [27.9, 3738.0], [28.0, 3738.0], [28.1, 3738.0], [28.2, 3738.0], [28.3, 3738.0], [28.4, 3741.0], [28.5, 3741.0], [28.6, 3741.0], [28.7, 3741.0], [28.8, 3741.0], [28.9, 3752.0], [29.0, 3752.0], [29.1, 3752.0], [29.2, 3758.0], [29.3, 3758.0], [29.4, 3765.0], [29.5, 3765.0], [29.6, 3765.0], [29.7, 3766.0], [29.8, 3766.0], [29.9, 3767.0], [30.0, 3767.0], [30.1, 3771.0], [30.2, 3771.0], [30.3, 3771.0], [30.4, 3774.0], [30.5, 3774.0], [30.6, 3775.0], [30.7, 3775.0], [30.8, 3775.0], [30.9, 3783.0], [31.0, 3783.0], [31.1, 3784.0], [31.2, 3784.0], [31.3, 3784.0], [31.4, 3797.0], [31.5, 3797.0], [31.6, 3799.0], [31.7, 3799.0], [31.8, 3799.0], [31.9, 3799.0], [32.0, 3799.0], [32.1, 3801.0], [32.2, 3801.0], [32.3, 3801.0], [32.4, 3802.0], [32.5, 3802.0], [32.6, 3815.0], [32.7, 3815.0], [32.8, 3815.0], [32.9, 3822.0], [33.0, 3822.0], [33.1, 3844.0], [33.2, 3844.0], [33.3, 3844.0], [33.4, 3845.0], [33.5, 3845.0], [33.6, 3856.0], [33.7, 3856.0], [33.8, 3856.0], [33.9, 3861.0], [34.0, 3861.0], [34.1, 3864.0], [34.2, 3864.0], [34.3, 3864.0], [34.4, 3868.0], [34.5, 3868.0], [34.6, 3874.0], [34.7, 3874.0], [34.8, 3874.0], [34.9, 3879.0], [35.0, 3879.0], [35.1, 3886.0], [35.2, 3886.0], [35.3, 3886.0], [35.4, 3887.0], [35.5, 3887.0], [35.6, 3888.0], [35.7, 3888.0], [35.8, 3888.0], [35.9, 3903.0], [36.0, 3903.0], [36.1, 3904.0], [36.2, 3904.0], [36.3, 3904.0], [36.4, 3904.0], [36.5, 3904.0], [36.6, 3911.0], [36.7, 3911.0], [36.8, 3911.0], [36.9, 3911.0], [37.0, 3911.0], [37.1, 3911.0], [37.2, 3911.0], [37.3, 3911.0], [37.4, 3912.0], [37.5, 3912.0], [37.6, 3916.0], [37.7, 3916.0], [37.8, 3916.0], [37.9, 3917.0], [38.0, 3917.0], [38.1, 3919.0], [38.2, 3919.0], [38.3, 3919.0], [38.4, 3922.0], [38.5, 3922.0], [38.6, 3927.0], [38.7, 3927.0], [38.8, 3927.0], [38.9, 3932.0], [39.0, 3932.0], [39.1, 3935.0], [39.2, 3935.0], [39.3, 3935.0], [39.4, 3950.0], [39.5, 3950.0], [39.6, 3951.0], [39.7, 3951.0], [39.8, 3951.0], [39.9, 3952.0], [40.0, 3952.0], [40.1, 3962.0], [40.2, 3962.0], [40.3, 3964.0], [40.4, 3964.0], [40.5, 3964.0], [40.6, 3965.0], [40.7, 3965.0], [40.8, 3965.0], [40.9, 3965.0], [41.0, 3965.0], [41.1, 3971.0], [41.2, 3971.0], [41.3, 3977.0], [41.4, 3977.0], [41.5, 3977.0], [41.6, 3977.0], [41.7, 3977.0], [41.8, 4006.0], [41.9, 4006.0], [42.0, 4006.0], [42.1, 4009.0], [42.2, 4009.0], [42.3, 4019.0], [42.4, 4019.0], [42.5, 4019.0], [42.6, 4020.0], [42.7, 4020.0], [42.8, 4028.0], [42.9, 4028.0], [43.0, 4028.0], [43.1, 4028.0], [43.2, 4028.0], [43.3, 4029.0], [43.4, 4029.0], [43.5, 4029.0], [43.6, 4031.0], [43.7, 4031.0], [43.8, 4036.0], [43.9, 4036.0], [44.0, 4036.0], [44.1, 4039.0], [44.2, 4039.0], [44.3, 4042.0], [44.4, 4042.0], [44.5, 4042.0], [44.6, 4052.0], [44.7, 4052.0], [44.8, 4058.0], [44.9, 4058.0], [45.0, 4058.0], [45.1, 4072.0], [45.2, 4072.0], [45.3, 4075.0], [45.4, 4075.0], [45.5, 4075.0], [45.6, 4082.0], [45.7, 4082.0], [45.8, 4100.0], [45.9, 4100.0], [46.0, 4100.0], [46.1, 4103.0], [46.2, 4103.0], [46.3, 4105.0], [46.4, 4105.0], [46.5, 4105.0], [46.6, 4105.0], [46.7, 4105.0], [46.8, 4108.0], [46.9, 4108.0], [47.0, 4108.0], [47.1, 4108.0], [47.2, 4108.0], [47.3, 4127.0], [47.4, 4127.0], [47.5, 4127.0], [47.6, 4134.0], [47.7, 4134.0], [47.8, 4134.0], [47.9, 4134.0], [48.0, 4134.0], [48.1, 4134.0], [48.2, 4134.0], [48.3, 4154.0], [48.4, 4154.0], [48.5, 4154.0], [48.6, 4155.0], [48.7, 4155.0], [48.8, 4157.0], [48.9, 4157.0], [49.0, 4157.0], [49.1, 4158.0], [49.2, 4158.0], [49.3, 4161.0], [49.4, 4161.0], [49.5, 4161.0], [49.6, 4165.0], [49.7, 4165.0], [49.8, 4166.0], [49.9, 4166.0], [50.0, 4166.0], [50.1, 4166.0], [50.2, 4166.0], [50.3, 4168.0], [50.4, 4168.0], [50.5, 4177.0], [50.6, 4177.0], [50.7, 4177.0], [50.8, 4182.0], [50.9, 4182.0], [51.0, 4200.0], [51.1, 4200.0], [51.2, 4200.0], [51.3, 4210.0], [51.4, 4210.0], [51.5, 4219.0], [51.6, 4219.0], [51.7, 4219.0], [51.8, 4220.0], [51.9, 4220.0], [52.0, 4222.0], [52.1, 4222.0], [52.2, 4222.0], [52.3, 4225.0], [52.4, 4225.0], [52.5, 4229.0], [52.6, 4229.0], [52.7, 4229.0], [52.8, 4233.0], [52.9, 4233.0], [53.0, 4233.0], [53.1, 4233.0], [53.2, 4233.0], [53.3, 4235.0], [53.4, 4235.0], [53.5, 4237.0], [53.6, 4237.0], [53.7, 4237.0], [53.8, 4237.0], [53.9, 4237.0], [54.0, 4239.0], [54.1, 4239.0], [54.2, 4239.0], [54.3, 4240.0], [54.4, 4240.0], [54.5, 4240.0], [54.6, 4240.0], [54.7, 4240.0], [54.8, 4242.0], [54.9, 4242.0], [55.0, 4244.0], [55.1, 4244.0], [55.2, 4244.0], [55.3, 4244.0], [55.4, 4244.0], [55.5, 4246.0], [55.6, 4246.0], [55.7, 4246.0], [55.8, 4253.0], [55.9, 4253.0], [56.0, 4254.0], [56.1, 4254.0], [56.2, 4254.0], [56.3, 4267.0], [56.4, 4267.0], [56.5, 4269.0], [56.6, 4269.0], [56.7, 4269.0], [56.8, 4270.0], [56.9, 4270.0], [57.0, 4276.0], [57.1, 4276.0], [57.2, 4276.0], [57.3, 4278.0], [57.4, 4278.0], [57.5, 4281.0], [57.6, 4281.0], [57.7, 4281.0], [57.8, 4288.0], [57.9, 4288.0], [58.0, 4288.0], [58.1, 4288.0], [58.2, 4288.0], [58.3, 4301.0], [58.4, 4301.0], [58.5, 4304.0], [58.6, 4304.0], [58.7, 4304.0], [58.8, 4305.0], [58.9, 4305.0], [59.0, 4305.0], [59.1, 4305.0], [59.2, 4305.0], [59.3, 4306.0], [59.4, 4306.0], [59.5, 4307.0], [59.6, 4307.0], [59.7, 4307.0], [59.8, 4316.0], [59.9, 4316.0], [60.0, 4327.0], [60.1, 4327.0], [60.2, 4331.0], [60.3, 4331.0], [60.4, 4331.0], [60.5, 4338.0], [60.6, 4338.0], [60.7, 4339.0], [60.8, 4339.0], [60.9, 4339.0], [61.0, 4342.0], [61.1, 4342.0], [61.2, 4350.0], [61.3, 4350.0], [61.4, 4350.0], [61.5, 4352.0], [61.6, 4352.0], [61.7, 4353.0], [61.8, 4353.0], [61.9, 4353.0], [62.0, 4353.0], [62.1, 4353.0], [62.2, 4358.0], [62.3, 4358.0], [62.4, 4358.0], [62.5, 4361.0], [62.6, 4361.0], [62.7, 4365.0], [62.8, 4365.0], [62.9, 4365.0], [63.0, 4372.0], [63.1, 4372.0], [63.2, 4372.0], [63.3, 4372.0], [63.4, 4372.0], [63.5, 4375.0], [63.6, 4375.0], [63.7, 4389.0], [63.8, 4389.0], [63.9, 4389.0], [64.0, 4395.0], [64.1, 4395.0], [64.2, 4400.0], [64.3, 4400.0], [64.4, 4400.0], [64.5, 4400.0], [64.6, 4400.0], [64.7, 4403.0], [64.8, 4403.0], [64.9, 4403.0], [65.0, 4411.0], [65.1, 4411.0], [65.2, 4414.0], [65.3, 4414.0], [65.4, 4414.0], [65.5, 4423.0], [65.6, 4423.0], [65.7, 4426.0], [65.8, 4426.0], [65.9, 4426.0], [66.0, 4432.0], [66.1, 4432.0], [66.2, 4433.0], [66.3, 4433.0], [66.4, 4433.0], [66.5, 4436.0], [66.6, 4436.0], [66.7, 4440.0], [66.8, 4440.0], [66.9, 4440.0], [67.0, 4441.0], [67.1, 4441.0], [67.2, 4443.0], [67.3, 4443.0], [67.4, 4443.0], [67.5, 4462.0], [67.6, 4462.0], [67.7, 4464.0], [67.8, 4464.0], [67.9, 4464.0], [68.0, 4466.0], [68.1, 4466.0], [68.2, 4478.0], [68.3, 4478.0], [68.4, 4478.0], [68.5, 4480.0], [68.6, 4480.0], [68.7, 4481.0], [68.8, 4481.0], [68.9, 4481.0], [69.0, 4497.0], [69.1, 4497.0], [69.2, 4498.0], [69.3, 4498.0], [69.4, 4498.0], [69.5, 4500.0], [69.6, 4500.0], [69.7, 4501.0], [69.8, 4501.0], [69.9, 4501.0], [70.0, 4506.0], [70.1, 4506.0], [70.2, 4512.0], [70.3, 4512.0], [70.4, 4523.0], [70.5, 4523.0], [70.6, 4523.0], [70.7, 4533.0], [70.8, 4533.0], [70.9, 4533.0], [71.0, 4533.0], [71.1, 4533.0], [71.2, 4535.0], [71.3, 4535.0], [71.4, 4541.0], [71.5, 4541.0], [71.6, 4541.0], [71.7, 4552.0], [71.8, 4552.0], [71.9, 4556.0], [72.0, 4556.0], [72.1, 4556.0], [72.2, 4561.0], [72.3, 4561.0], [72.4, 4565.0], [72.5, 4565.0], [72.6, 4565.0], [72.7, 4566.0], [72.8, 4566.0], [72.9, 4572.0], [73.0, 4572.0], [73.1, 4572.0], [73.2, 4578.0], [73.3, 4578.0], [73.4, 4580.0], [73.5, 4580.0], [73.6, 4580.0], [73.7, 4588.0], [73.8, 4588.0], [73.9, 4591.0], [74.0, 4591.0], [74.1, 4591.0], [74.2, 4599.0], [74.3, 4599.0], [74.4, 4602.0], [74.5, 4602.0], [74.6, 4602.0], [74.7, 4611.0], [74.8, 4611.0], [74.9, 4614.0], [75.0, 4614.0], [75.1, 4614.0], [75.2, 4624.0], [75.3, 4624.0], [75.4, 4625.0], [75.5, 4625.0], [75.6, 4625.0], [75.7, 4633.0], [75.8, 4633.0], [75.9, 4644.0], [76.0, 4644.0], [76.1, 4644.0], [76.2, 4645.0], [76.3, 4645.0], [76.4, 4645.0], [76.5, 4645.0], [76.6, 4645.0], [76.7, 4648.0], [76.8, 4648.0], [76.9, 4651.0], [77.0, 4651.0], [77.1, 4651.0], [77.2, 4655.0], [77.3, 4655.0], [77.4, 4656.0], [77.5, 4656.0], [77.6, 4656.0], [77.7, 4656.0], [77.8, 4656.0], [77.9, 4657.0], [78.0, 4657.0], [78.1, 4657.0], [78.2, 4667.0], [78.3, 4667.0], [78.4, 4675.0], [78.5, 4675.0], [78.6, 4675.0], [78.7, 4680.0], [78.8, 4680.0], [78.9, 4681.0], [79.0, 4681.0], [79.1, 4681.0], [79.2, 4691.0], [79.3, 4691.0], [79.4, 4691.0], [79.5, 4691.0], [79.6, 4691.0], [79.7, 4695.0], [79.8, 4695.0], [79.9, 4703.0], [80.0, 4703.0], [80.1, 4714.0], [80.2, 4714.0], [80.3, 4714.0], [80.4, 4725.0], [80.5, 4725.0], [80.6, 4732.0], [80.7, 4732.0], [80.8, 4732.0], [80.9, 4733.0], [81.0, 4733.0], [81.1, 4736.0], [81.2, 4736.0], [81.3, 4736.0], [81.4, 4742.0], [81.5, 4742.0], [81.6, 4743.0], [81.7, 4743.0], [81.8, 4743.0], [81.9, 4744.0], [82.0, 4744.0], [82.1, 4745.0], [82.2, 4745.0], [82.3, 4745.0], [82.4, 4747.0], [82.5, 4747.0], [82.6, 4749.0], [82.7, 4749.0], [82.8, 4749.0], [82.9, 4759.0], [83.0, 4759.0], [83.1, 4760.0], [83.2, 4760.0], [83.3, 4760.0], [83.4, 4770.0], [83.5, 4770.0], [83.6, 4771.0], [83.7, 4771.0], [83.8, 4771.0], [83.9, 4776.0], [84.0, 4776.0], [84.1, 4790.0], [84.2, 4790.0], [84.3, 4790.0], [84.4, 4796.0], [84.5, 4796.0], [84.6, 4809.0], [84.7, 4809.0], [84.8, 4809.0], [84.9, 4815.0], [85.0, 4815.0], [85.1, 4827.0], [85.2, 4827.0], [85.3, 4827.0], [85.4, 4834.0], [85.5, 4834.0], [85.6, 4836.0], [85.7, 4836.0], [85.8, 4836.0], [85.9, 4843.0], [86.0, 4843.0], [86.1, 4845.0], [86.2, 4845.0], [86.3, 4845.0], [86.4, 4856.0], [86.5, 4856.0], [86.6, 4858.0], [86.7, 4858.0], [86.8, 4858.0], [86.9, 4868.0], [87.0, 4868.0], [87.1, 4874.0], [87.2, 4874.0], [87.3, 4874.0], [87.4, 4879.0], [87.5, 4879.0], [87.6, 4895.0], [87.7, 4895.0], [87.8, 4895.0], [87.9, 4897.0], [88.0, 4897.0], [88.1, 4907.0], [88.2, 4907.0], [88.3, 4907.0], [88.4, 4909.0], [88.5, 4909.0], [88.6, 4918.0], [88.7, 4918.0], [88.8, 4918.0], [88.9, 4927.0], [89.0, 4927.0], [89.1, 4936.0], [89.2, 4936.0], [89.3, 4936.0], [89.4, 4938.0], [89.5, 4938.0], [89.6, 4958.0], [89.7, 4958.0], [89.8, 4958.0], [89.9, 4961.0], [90.0, 4961.0], [90.1, 4964.0], [90.2, 4964.0], [90.3, 4975.0], [90.4, 4975.0], [90.5, 4975.0], [90.6, 4984.0], [90.7, 4984.0], [90.8, 4989.0], [90.9, 4989.0], [91.0, 4989.0], [91.1, 4995.0], [91.2, 4995.0], [91.3, 4995.0], [91.4, 4995.0], [91.5, 4995.0], [91.6, 4999.0], [91.7, 4999.0], [91.8, 5006.0], [91.9, 5006.0], [92.0, 5006.0], [92.1, 5006.0], [92.2, 5006.0], [92.3, 5014.0], [92.4, 5014.0], [92.5, 5014.0], [92.6, 5020.0], [92.7, 5020.0], [92.8, 5026.0], [92.9, 5026.0], [93.0, 5026.0], [93.1, 5029.0], [93.2, 5029.0], [93.3, 5035.0], [93.4, 5035.0], [93.5, 5035.0], [93.6, 5036.0], [93.7, 5036.0], [93.8, 5036.0], [93.9, 5036.0], [94.0, 5036.0], [94.1, 5040.0], [94.2, 5040.0], [94.3, 5048.0], [94.4, 5048.0], [94.5, 5048.0], [94.6, 5050.0], [94.7, 5050.0], [94.8, 5052.0], [94.9, 5052.0], [95.0, 5052.0], [95.1, 5057.0], [95.2, 5057.0], [95.3, 5071.0], [95.4, 5071.0], [95.5, 5071.0], [95.6, 5074.0], [95.7, 5074.0], [95.8, 5091.0], [95.9, 5091.0], [96.0, 5091.0], [96.1, 5096.0], [96.2, 5096.0], [96.3, 5111.0], [96.4, 5111.0], [96.5, 5111.0], [96.6, 5113.0], [96.7, 5113.0], [96.8, 5115.0], [96.9, 5115.0], [97.0, 5115.0], [97.1, 5125.0], [97.2, 5125.0], [97.3, 5126.0], [97.4, 5126.0], [97.5, 5126.0], [97.6, 5128.0], [97.7, 5128.0], [97.8, 5134.0], [97.9, 5134.0], [98.0, 5134.0], [98.1, 5149.0], [98.2, 5149.0], [98.3, 5159.0], [98.4, 5159.0], [98.5, 5159.0], [98.6, 5209.0], [98.7, 5209.0], [98.8, 5285.0], [98.9, 5285.0], [99.0, 5285.0], [99.1, 5335.0], [99.2, 5335.0], [99.3, 5360.0], [99.4, 5360.0], [99.5, 5360.0], [99.6, 127668.0], [99.7, 127668.0], [99.8, 127697.0], [99.9, 127697.0]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[0.0, 346.0], [0.1, 346.0], [0.2, 346.0], [0.3, 385.0], [0.4, 385.0], [0.5, 403.0], [0.6, 403.0], [0.7, 403.0], [0.8, 4955.0], [0.9, 4955.0], [1.0, 4961.0], [1.1, 4961.0], [1.2, 4961.0], [1.3, 5153.0], [1.4, 5153.0], [1.5, 6073.0], [1.6, 6073.0], [1.7, 6073.0], [1.8, 9224.0], [1.9, 9224.0], [2.0, 9311.0], [2.1, 9311.0], [2.2, 9311.0], [2.3, 9596.0], [2.4, 9596.0], [2.5, 9733.0], [2.6, 9733.0], [2.7, 9733.0], [2.8, 9858.0], [2.9, 9858.0], [3.0, 9904.0], [3.1, 9904.0], [3.2, 9904.0], [3.3, 9954.0], [3.4, 9954.0], [3.5, 12031.0], [3.6, 12031.0], [3.7, 12031.0], [3.8, 12108.0], [3.9, 12108.0], [4.0, 12204.0], [4.1, 12204.0], [4.2, 12204.0], [4.3, 12384.0], [4.4, 12384.0], [4.5, 12462.0], [4.6, 12462.0], [4.7, 12462.0], [4.8, 12730.0], [4.9, 12730.0], [5.0, 13674.0], [5.1, 13674.0], [5.2, 13674.0], [5.3, 13675.0], [5.4, 13675.0], [5.5, 14251.0], [5.6, 14251.0], [5.7, 14251.0], [5.8, 14295.0], [5.9, 14295.0], [6.0, 14297.0], [6.1, 14297.0], [6.2, 14297.0], [6.3, 14319.0], [6.4, 14319.0], [6.5, 14614.0], [6.6, 14614.0], [6.7, 14614.0], [6.8, 14737.0], [6.9, 14737.0], [7.0, 14752.0], [7.1, 14752.0], [7.2, 14752.0], [7.3, 14765.0], [7.4, 14765.0], [7.5, 14775.0], [7.6, 14775.0], [7.7, 14775.0], [7.8, 14781.0], [7.9, 14781.0], [8.0, 15086.0], [8.1, 15086.0], [8.2, 15086.0], [8.3, 15137.0], [8.4, 15137.0], [8.5, 15410.0], [8.6, 15410.0], [8.7, 15410.0], [8.8, 15646.0], [8.9, 15646.0], [9.0, 15963.0], [9.1, 15963.0], [9.2, 15963.0], [9.3, 15964.0], [9.4, 15964.0], [9.5, 15966.0], [9.6, 15966.0], [9.7, 15966.0], [9.8, 15974.0], [9.9, 15974.0], [10.0, 16007.0], [10.1, 16007.0], [10.2, 16007.0], [10.3, 17049.0], [10.4, 17049.0], [10.5, 17505.0], [10.6, 17505.0], [10.7, 17505.0], [10.8, 17733.0], [10.9, 17733.0], [11.0, 18010.0], [11.1, 18010.0], [11.2, 18010.0], [11.3, 18184.0], [11.4, 18184.0], [11.5, 18477.0], [11.6, 18477.0], [11.7, 18477.0], [11.8, 18688.0], [11.9, 18688.0], [12.0, 18817.0], [12.1, 18817.0], [12.2, 18817.0], [12.3, 18870.0], [12.4, 18870.0], [12.5, 19437.0], [12.6, 19437.0], [12.7, 19437.0], [12.8, 19942.0], [12.9, 19942.0], [13.0, 20379.0], [13.1, 20379.0], [13.2, 20379.0], [13.3, 20832.0], [13.4, 20832.0], [13.5, 21372.0], [13.6, 21372.0], [13.7, 21372.0], [13.8, 21393.0], [13.9, 21393.0], [14.0, 21433.0], [14.1, 21433.0], [14.2, 21433.0], [14.3, 21692.0], [14.4, 21692.0], [14.5, 22033.0], [14.6, 22033.0], [14.7, 22033.0], [14.8, 22358.0], [14.9, 22358.0], [15.0, 22703.0], [15.1, 22703.0], [15.2, 22703.0], [15.3, 22812.0], [15.4, 22812.0], [15.5, 23169.0], [15.6, 23169.0], [15.7, 23169.0], [15.8, 23375.0], [15.9, 23375.0], [16.0, 24133.0], [16.1, 24133.0], [16.2, 24133.0], [16.3, 24735.0], [16.4, 24735.0], [16.5, 24749.0], [16.6, 24749.0], [16.7, 24749.0], [16.8, 24857.0], [16.9, 24857.0], [17.0, 25448.0], [17.1, 25448.0], [17.2, 25448.0], [17.3, 25691.0], [17.4, 25691.0], [17.5, 25971.0], [17.6, 25971.0], [17.7, 25971.0], [17.8, 25997.0], [17.9, 25997.0], [18.0, 27235.0], [18.1, 27235.0], [18.2, 27235.0], [18.3, 27600.0], [18.4, 27600.0], [18.5, 27681.0], [18.6, 27681.0], [18.7, 27681.0], [18.8, 28025.0], [18.9, 28025.0], [19.0, 28064.0], [19.1, 28064.0], [19.2, 28064.0], [19.3, 28100.0], [19.4, 28100.0], [19.5, 28750.0], [19.6, 28750.0], [19.7, 28750.0], [19.8, 28802.0], [19.9, 28802.0], [20.0, 28856.0], [20.1, 28856.0], [20.2, 28856.0], [20.3, 29249.0], [20.4, 29249.0], [20.5, 29942.0], [20.6, 29942.0], [20.7, 29942.0], [20.8, 30606.0], [20.9, 30606.0], [21.0, 30910.0], [21.1, 30910.0], [21.2, 30910.0], [21.3, 31009.0], [21.4, 31009.0], [21.5, 31176.0], [21.6, 31176.0], [21.7, 31176.0], [21.8, 31390.0], [21.9, 31390.0], [22.0, 31904.0], [22.1, 31904.0], [22.2, 31904.0], [22.3, 32316.0], [22.4, 32316.0], [22.5, 32359.0], [22.6, 32359.0], [22.7, 32359.0], [22.8, 32853.0], [22.9, 32853.0], [23.0, 32876.0], [23.1, 32876.0], [23.2, 32876.0], [23.3, 32876.0], [23.4, 32876.0], [23.5, 33503.0], [23.6, 33503.0], [23.7, 33503.0], [23.8, 33915.0], [23.9, 33915.0], [24.0, 33980.0], [24.1, 33980.0], [24.2, 33980.0], [24.3, 34287.0], [24.4, 34287.0], [24.5, 34419.0], [24.6, 34419.0], [24.7, 34419.0], [24.8, 35229.0], [24.9, 35229.0], [25.0, 35687.0], [25.1, 35687.0], [25.2, 35687.0], [25.3, 35886.0], [25.4, 35886.0], [25.5, 36169.0], [25.6, 36169.0], [25.7, 36169.0], [25.8, 36218.0], [25.9, 36218.0], [26.0, 36283.0], [26.1, 36283.0], [26.2, 36283.0], [26.3, 36921.0], [26.4, 36921.0], [26.5, 37398.0], [26.6, 37398.0], [26.7, 37398.0], [26.8, 37531.0], [26.9, 37531.0], [27.0, 38236.0], [27.1, 38236.0], [27.2, 38236.0], [27.3, 38889.0], [27.4, 38889.0], [27.5, 39286.0], [27.6, 39286.0], [27.7, 39286.0], [27.8, 39572.0], [27.9, 39572.0], [28.0, 39573.0], [28.1, 39573.0], [28.2, 39573.0], [28.3, 39611.0], [28.4, 39611.0], [28.5, 39640.0], [28.6, 39640.0], [28.7, 39640.0], [28.8, 39796.0], [28.9, 39796.0], [29.0, 41367.0], [29.1, 41367.0], [29.2, 41367.0], [29.3, 41611.0], [29.4, 41611.0], [29.5, 41648.0], [29.6, 41648.0], [29.7, 41648.0], [29.8, 42218.0], [29.9, 42218.0], [30.0, 42811.0], [30.1, 42811.0], [30.2, 42811.0], [30.3, 42849.0], [30.4, 42849.0], [30.5, 42850.0], [30.6, 42850.0], [30.7, 42850.0], [30.8, 43063.0], [30.9, 43063.0], [31.0, 43516.0], [31.1, 43516.0], [31.2, 43516.0], [31.3, 43670.0], [31.4, 43670.0], [31.5, 44303.0], [31.6, 44303.0], [31.7, 44303.0], [31.8, 44526.0], [31.9, 44526.0], [32.0, 45979.0], [32.1, 45979.0], [32.2, 45979.0], [32.3, 45992.0], [32.4, 45992.0], [32.5, 46018.0], [32.6, 46018.0], [32.7, 46018.0], [32.8, 46037.0], [32.9, 46037.0], [33.0, 46561.0], [33.1, 46561.0], [33.2, 46561.0], [33.3, 46802.0], [33.4, 46802.0], [33.5, 47067.0], [33.6, 47067.0], [33.7, 47067.0], [33.8, 47233.0], [33.9, 47233.0], [34.0, 47615.0], [34.1, 47615.0], [34.2, 47615.0], [34.3, 47625.0], [34.4, 47625.0], [34.5, 48662.0], [34.6, 48662.0], [34.7, 48662.0], [34.8, 48801.0], [34.9, 48801.0], [35.0, 49035.0], [35.1, 49035.0], [35.2, 49035.0], [35.3, 49076.0], [35.4, 49076.0], [35.5, 49706.0], [35.6, 49706.0], [35.7, 49706.0], [35.8, 50333.0], [35.9, 50333.0], [36.0, 50451.0], [36.1, 50451.0], [36.2, 50451.0], [36.3, 50589.0], [36.4, 50589.0], [36.5, 50781.0], [36.6, 50781.0], [36.7, 50781.0], [36.8, 51469.0], [36.9, 51469.0], [37.0, 52165.0], [37.1, 52165.0], [37.2, 52165.0], [37.3, 52355.0], [37.4, 52355.0], [37.5, 52552.0], [37.6, 52552.0], [37.7, 52552.0], [37.8, 52888.0], [37.9, 52888.0], [38.0, 53545.0], [38.1, 53545.0], [38.2, 53545.0], [38.3, 53789.0], [38.4, 53789.0], [38.5, 53996.0], [38.6, 53996.0], [38.7, 53996.0], [38.8, 54036.0], [38.9, 54036.0], [39.0, 54069.0], [39.1, 54069.0], [39.2, 54069.0], [39.3, 54640.0], [39.4, 54640.0], [39.5, 55120.0], [39.6, 55120.0], [39.7, 55120.0], [39.8, 55240.0], [39.9, 55240.0], [40.0, 55652.0], [40.1, 55652.0], [40.2, 55652.0], [40.3, 56032.0], [40.4, 56032.0], [40.5, 56242.0], [40.6, 56242.0], [40.7, 56242.0], [40.8, 56711.0], [40.9, 56711.0], [41.0, 57030.0], [41.1, 57030.0], [41.2, 57030.0], [41.3, 57299.0], [41.4, 57299.0], [41.5, 57590.0], [41.6, 57590.0], [41.7, 57590.0], [41.8, 57914.0], [41.9, 57914.0], [42.0, 58037.0], [42.1, 58037.0], [42.2, 58037.0], [42.3, 58687.0], [42.4, 58687.0], [42.5, 58831.0], [42.6, 58831.0], [42.7, 58831.0], [42.8, 59099.0], [42.9, 59099.0], [43.0, 59825.0], [43.1, 59825.0], [43.2, 59825.0], [43.3, 59940.0], [43.4, 59940.0], [43.5, 60220.0], [43.6, 60220.0], [43.7, 60220.0], [43.8, 61280.0], [43.9, 61280.0], [44.0, 61571.0], [44.1, 61571.0], [44.2, 61571.0], [44.3, 61662.0], [44.4, 61662.0], [44.5, 62383.0], [44.6, 62383.0], [44.7, 62383.0], [44.8, 62514.0], [44.9, 62514.0], [45.0, 63171.0], [45.1, 63171.0], [45.2, 63171.0], [45.3, 63569.0], [45.4, 63569.0], [45.5, 63806.0], [45.6, 63806.0], [45.7, 63806.0], [45.8, 63875.0], [45.9, 63875.0], [46.0, 64113.0], [46.1, 64113.0], [46.2, 64113.0], [46.3, 64423.0], [46.4, 64423.0], [46.5, 65295.0], [46.6, 65295.0], [46.7, 65295.0], [46.8, 65418.0], [46.9, 65418.0], [47.0, 65509.0], [47.1, 65509.0], [47.2, 65509.0], [47.3, 65660.0], [47.4, 65660.0], [47.5, 66417.0], [47.6, 66417.0], [47.7, 66417.0], [47.8, 66683.0], [47.9, 66683.0], [48.0, 66850.0], [48.1, 66850.0], [48.2, 66850.0], [48.3, 66965.0], [48.4, 66965.0], [48.5, 67256.0], [48.6, 67256.0], [48.7, 67256.0], [48.8, 67637.0], [48.9, 67637.0], [49.0, 68609.0], [49.1, 68609.0], [49.2, 68609.0], [49.3, 68640.0], [49.4, 68640.0], [49.5, 68704.0], [49.6, 68704.0], [49.7, 68704.0], [49.8, 68812.0], [49.9, 68812.0], [50.0, 69615.0], [50.1, 69615.0], [50.2, 69615.0], [50.3, 69701.0], [50.4, 69701.0], [50.5, 70120.0], [50.6, 70120.0], [50.7, 70120.0], [50.8, 70405.0], [50.9, 70405.0], [51.0, 70469.0], [51.1, 70469.0], [51.2, 70469.0], [51.3, 72116.0], [51.4, 72116.0], [51.5, 72155.0], [51.6, 72155.0], [51.7, 72155.0], [51.8, 72172.0], [51.9, 72172.0], [52.0, 72308.0], [52.1, 72308.0], [52.2, 72308.0], [52.3, 73073.0], [52.4, 73073.0], [52.5, 73349.0], [52.6, 73349.0], [52.7, 73349.0], [52.8, 73360.0], [52.9, 73360.0], [53.0, 73368.0], [53.1, 73368.0], [53.2, 73368.0], [53.3, 73767.0], [53.4, 73767.0], [53.5, 73949.0], [53.6, 73949.0], [53.7, 73949.0], [53.8, 75117.0], [53.9, 75117.0], [54.0, 75338.0], [54.1, 75338.0], [54.2, 75338.0], [54.3, 75523.0], [54.4, 75523.0], [54.5, 76017.0], [54.6, 76017.0], [54.7, 76017.0], [54.8, 76302.0], [54.9, 76302.0], [55.0, 76314.0], [55.1, 76314.0], [55.2, 76314.0], [55.3, 76701.0], [55.4, 76701.0], [55.5, 77881.0], [55.6, 77881.0], [55.7, 77881.0], [55.8, 77952.0], [55.9, 77952.0], [56.0, 78137.0], [56.1, 78137.0], [56.2, 78137.0], [56.3, 78220.0], [56.4, 78220.0], [56.5, 78566.0], [56.6, 78566.0], [56.7, 78566.0], [56.8, 78873.0], [56.9, 78873.0], [57.0, 79057.0], [57.1, 79057.0], [57.2, 79057.0], [57.3, 79066.0], [57.4, 79066.0], [57.5, 79141.0], [57.6, 79141.0], [57.7, 79141.0], [57.8, 81109.0], [57.9, 81109.0], [58.0, 81543.0], [58.1, 81543.0], [58.2, 81543.0], [58.3, 81716.0], [58.4, 81716.0], [58.5, 81764.0], [58.6, 81764.0], [58.7, 81764.0], [58.8, 82006.0], [58.9, 82006.0], [59.0, 82539.0], [59.1, 82539.0], [59.2, 82539.0], [59.3, 82632.0], [59.4, 82632.0], [59.5, 82683.0], [59.6, 82683.0], [59.7, 82683.0], [59.8, 82940.0], [59.9, 82940.0], [60.0, 82984.0], [60.1, 82984.0], [60.2, 82984.0], [60.3, 84295.0], [60.4, 84295.0], [60.5, 84812.0], [60.6, 84812.0], [60.7, 84812.0], [60.8, 85466.0], [60.9, 85466.0], [61.0, 85559.0], [61.1, 85559.0], [61.2, 85559.0], [61.3, 85737.0], [61.4, 85737.0], [61.5, 85901.0], [61.6, 85901.0], [61.7, 85901.0], [61.8, 85962.0], [61.9, 85962.0], [62.0, 86545.0], [62.1, 86545.0], [62.2, 86545.0], [62.3, 86584.0], [62.4, 86584.0], [62.5, 86912.0], [62.6, 86912.0], [62.7, 86912.0], [62.8, 86963.0], [62.9, 86963.0], [63.0, 87951.0], [63.1, 87951.0], [63.2, 87951.0], [63.3, 88388.0], [63.4, 88388.0], [63.5, 88535.0], [63.6, 88535.0], [63.7, 88535.0], [63.8, 88661.0], [63.9, 88661.0], [64.0, 88707.0], [64.1, 88707.0], [64.2, 88707.0], [64.3, 88846.0], [64.4, 88846.0], [64.5, 89437.0], [64.6, 89437.0], [64.7, 89437.0], [64.8, 89460.0], [64.9, 89460.0], [65.0, 89811.0], [65.1, 89811.0], [65.2, 89811.0], [65.3, 89982.0], [65.4, 89982.0], [65.5, 90737.0], [65.6, 90737.0], [65.7, 90737.0], [65.8, 91308.0], [65.9, 91308.0], [66.0, 91362.0], [66.1, 91362.0], [66.2, 91362.0], [66.3, 91541.0], [66.4, 91541.0], [66.5, 91596.0], [66.6, 91596.0], [66.7, 91596.0], [66.8, 91638.0], [66.9, 91638.0], [67.0, 92202.0], [67.1, 92202.0], [67.2, 92202.0], [67.3, 92221.0], [67.4, 92221.0], [67.5, 93520.0], [67.6, 93520.0], [67.7, 93520.0], [67.8, 93642.0], [67.9, 93642.0], [68.0, 94416.0], [68.1, 94416.0], [68.2, 94416.0], [68.3, 94595.0], [68.4, 94595.0], [68.5, 94862.0], [68.6, 94862.0], [68.7, 94862.0], [68.8, 94979.0], [68.9, 94979.0], [69.0, 95128.0], [69.1, 95128.0], [69.2, 95128.0], [69.3, 95735.0], [69.4, 95735.0], [69.5, 95895.0], [69.6, 95895.0], [69.7, 95895.0], [69.8, 96102.0], [69.9, 96102.0], [70.0, 96464.0], [70.1, 96464.0], [70.2, 96464.0], [70.3, 96902.0], [70.4, 96902.0], [70.5, 97451.0], [70.6, 97451.0], [70.7, 97451.0], [70.8, 97584.0], [70.9, 97584.0], [71.0, 97589.0], [71.1, 97589.0], [71.2, 97589.0], [71.3, 97658.0], [71.4, 97658.0], [71.5, 97892.0], [71.6, 97892.0], [71.7, 97892.0], [71.8, 98910.0], [71.9, 98910.0], [72.0, 98960.0], [72.1, 98960.0], [72.2, 98960.0], [72.3, 98992.0], [72.4, 98992.0], [72.5, 99282.0], [72.6, 99282.0], [72.7, 99282.0], [72.8, 99784.0], [72.9, 99784.0], [73.0, 100094.0], [73.1, 100094.0], [73.2, 100094.0], [73.3, 100219.0], [73.4, 100219.0], [73.5, 100285.0], [73.6, 100285.0], [73.7, 100285.0], [73.8, 100648.0], [73.9, 100648.0], [74.0, 100872.0], [74.1, 100872.0], [74.2, 100872.0], [74.3, 102106.0], [74.4, 102106.0], [74.5, 102238.0], [74.6, 102238.0], [74.7, 102238.0], [74.8, 102339.0], [74.9, 102339.0], [75.0, 102708.0], [75.1, 102708.0], [75.2, 102708.0], [75.3, 102770.0], [75.4, 102770.0], [75.5, 103458.0], [75.6, 103458.0], [75.7, 103458.0], [75.8, 103513.0], [75.9, 103513.0], [76.0, 103618.0], [76.1, 103618.0], [76.2, 103618.0], [76.3, 103883.0], [76.4, 103883.0], [76.5, 103926.0], [76.6, 103926.0], [76.7, 103926.0], [76.8, 105354.0], [76.9, 105354.0], [77.0, 105486.0], [77.1, 105486.0], [77.2, 105486.0], [77.3, 105694.0], [77.4, 105694.0], [77.5, 106010.0], [77.6, 106010.0], [77.7, 106010.0], [77.8, 106338.0], [77.9, 106338.0], [78.0, 106366.0], [78.1, 106366.0], [78.2, 106366.0], [78.3, 106435.0], [78.4, 106435.0], [78.5, 106545.0], [78.6, 106545.0], [78.7, 106545.0], [78.8, 106625.0], [78.9, 106625.0], [79.0, 106814.0], [79.1, 106814.0], [79.2, 106814.0], [79.3, 107873.0], [79.4, 107873.0], [79.5, 108151.0], [79.6, 108151.0], [79.7, 108151.0], [79.8, 108247.0], [79.9, 108247.0], [80.0, 108688.0], [80.1, 108688.0], [80.2, 108688.0], [80.3, 108760.0], [80.4, 108760.0], [80.5, 108911.0], [80.6, 108911.0], [80.7, 108911.0], [80.8, 109217.0], [80.9, 109217.0], [81.0, 109219.0], [81.1, 109219.0], [81.2, 109219.0], [81.3, 109262.0], [81.4, 109262.0], [81.5, 109639.0], [81.6, 109639.0], [81.7, 109639.0], [81.8, 110668.0], [81.9, 110668.0], [82.0, 110672.0], [82.1, 110672.0], [82.2, 110672.0], [82.3, 110926.0], [82.4, 110926.0], [82.5, 111322.0], [82.6, 111322.0], [82.7, 111322.0], [82.8, 111405.0], [82.9, 111405.0], [83.0, 111418.0], [83.1, 111418.0], [83.2, 111418.0], [83.3, 111895.0], [83.4, 111895.0], [83.5, 111898.0], [83.6, 111898.0], [83.7, 111898.0], [83.8, 111911.0], [83.9, 111911.0], [84.0, 112514.0], [84.1, 112514.0], [84.2, 112514.0], [84.3, 113662.0], [84.4, 113662.0], [84.5, 113749.0], [84.6, 113749.0], [84.7, 113749.0], [84.8, 113950.0], [84.9, 113950.0], [85.0, 114689.0], [85.1, 114689.0], [85.2, 114689.0], [85.3, 114762.0], [85.4, 114762.0], [85.5, 114771.0], [85.6, 114771.0], [85.7, 114771.0], [85.8, 114841.0], [85.9, 114841.0], [86.0, 114904.0], [86.1, 114904.0], [86.2, 114904.0], [86.3, 115166.0], [86.4, 115166.0], [86.5, 115997.0], [86.6, 115997.0], [86.7, 115997.0], [86.8, 116479.0], [86.9, 116479.0], [87.0, 116651.0], [87.1, 116651.0], [87.2, 116651.0], [87.3, 117176.0], [87.4, 117176.0], [87.5, 117184.0], [87.6, 117184.0], [87.7, 117184.0], [87.8, 117265.0], [87.9, 117265.0], [88.0, 117267.0], [88.1, 117267.0], [88.2, 117267.0], [88.3, 117752.0], [88.4, 117752.0], [88.5, 117981.0], [88.6, 117981.0], [88.7, 117981.0], [88.8, 118157.0], [88.9, 118157.0], [89.0, 118899.0], [89.1, 118899.0], [89.2, 118899.0], [89.3, 118915.0], [89.4, 118915.0], [89.5, 119563.0], [89.6, 119563.0], [89.7, 119563.0], [89.8, 119601.0], [89.9, 119601.0], [90.0, 119693.0], [90.1, 119693.0], [90.2, 119693.0], [90.3, 119697.0], [90.4, 119697.0], [90.5, 120234.0], [90.6, 120234.0], [90.7, 120234.0], [90.8, 120494.0], [90.9, 120494.0], [91.0, 120608.0], [91.1, 120608.0], [91.2, 120608.0], [91.3, 120803.0], [91.4, 120803.0], [91.5, 121739.0], [91.6, 121739.0], [91.7, 121739.0], [91.8, 122167.0], [91.9, 122167.0], [92.0, 122567.0], [92.1, 122567.0], [92.2, 122567.0], [92.3, 122737.0], [92.4, 122737.0], [92.5, 122884.0], [92.6, 122884.0], [92.7, 122884.0], [92.8, 122991.0], [92.9, 122991.0], [93.0, 123255.0], [93.1, 123255.0], [93.2, 123255.0], [93.3, 123523.0], [93.4, 123523.0], [93.5, 124457.0], [93.6, 124457.0], [93.7, 124457.0], [93.8, 124889.0], [93.9, 124889.0], [94.0, 124998.0], [94.1, 124998.0], [94.2, 124998.0], [94.3, 125472.0], [94.4, 125472.0], [94.5, 125736.0], [94.6, 125736.0], [94.7, 125736.0], [94.8, 125866.0], [94.9, 125866.0], [95.0, 125948.0], [95.1, 125948.0], [95.2, 125948.0], [95.3, 126225.0], [95.4, 126225.0], [95.5, 126396.0], [95.6, 126396.0], [95.7, 126396.0], [95.8, 126720.0], [95.9, 126720.0], [96.0, 127623.0], [96.1, 127623.0], [96.2, 127623.0], [96.3, 128110.0], [96.4, 128110.0], [96.5, 128765.0], [96.6, 128765.0], [96.7, 128765.0], [96.8, 128792.0], [96.9, 128792.0], [97.0, 128971.0], [97.1, 128971.0], [97.2, 128971.0], [97.3, 129004.0], [97.4, 129004.0], [97.5, 129021.0], [97.6, 129021.0], [97.7, 129021.0], [97.8, 129062.0], [97.9, 129062.0], [98.0, 129806.0], [98.1, 129806.0], [98.2, 129806.0], [98.3, 130653.0], [98.4, 130653.0], [98.5, 131980.0], [98.6, 131980.0], [98.7, 131980.0], [98.8, 131989.0], [98.9, 131989.0], [99.0, 132047.0], [99.1, 132047.0], [99.2, 132047.0], [99.3, 132228.0], [99.4, 132228.0], [99.5, 140487.0], [99.6, 140487.0], [99.7, 140487.0], [99.8, 145359.0], [99.9, 145359.0]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[0.0, 259.0], [0.1, 259.0], [0.2, 259.0], [0.3, 259.0], [0.4, 259.0], [0.5, 261.0], [0.6, 261.0], [0.7, 261.0], [0.8, 261.0], [0.9, 261.0], [1.0, 262.0], [1.1, 262.0], [1.2, 262.0], [1.3, 263.0], [1.4, 263.0], [1.5, 263.0], [1.6, 263.0], [1.7, 263.0], [1.8, 263.0], [1.9, 263.0], [2.0, 264.0], [2.1, 264.0], [2.2, 264.0], [2.3, 265.0], [2.4, 265.0], [2.5, 269.0], [2.6, 269.0], [2.7, 269.0], [2.8, 270.0], [2.9, 270.0], [3.0, 270.0], [3.1, 270.0], [3.2, 270.0], [3.3, 272.0], [3.4, 272.0], [3.5, 272.0], [3.6, 272.0], [3.7, 272.0], [3.8, 272.0], [3.9, 272.0], [4.0, 273.0], [4.1, 273.0], [4.2, 273.0], [4.3, 273.0], [4.4, 273.0], [4.5, 274.0], [4.6, 274.0], [4.7, 274.0], [4.8, 275.0], [4.9, 275.0], [5.0, 275.0], [5.1, 275.0], [5.2, 275.0], [5.3, 276.0], [5.4, 276.0], [5.5, 277.0], [5.6, 277.0], [5.7, 277.0], [5.8, 277.0], [5.9, 277.0], [6.0, 277.0], [6.1, 277.0], [6.2, 277.0], [6.3, 278.0], [6.4, 278.0], [6.5, 279.0], [6.6, 279.0], [6.7, 279.0], [6.8, 279.0], [6.9, 279.0], [7.0, 280.0], [7.1, 280.0], [7.2, 280.0], [7.3, 280.0], [7.4, 280.0], [7.5, 281.0], [7.6, 281.0], [7.7, 281.0], [7.8, 281.0], [7.9, 281.0], [8.0, 283.0], [8.1, 283.0], [8.2, 283.0], [8.3, 284.0], [8.4, 284.0], [8.5, 284.0], [8.6, 284.0], [8.7, 284.0], [8.8, 284.0], [8.9, 284.0], [9.0, 284.0], [9.1, 284.0], [9.2, 284.0], [9.3, 285.0], [9.4, 285.0], [9.5, 285.0], [9.6, 285.0], [9.7, 285.0], [9.8, 285.0], [9.9, 285.0], [10.0, 285.0], [10.1, 285.0], [10.2, 285.0], [10.3, 286.0], [10.4, 286.0], [10.5, 286.0], [10.6, 286.0], [10.7, 286.0], [10.8, 286.0], [10.9, 286.0], [11.0, 287.0], [11.1, 287.0], [11.2, 287.0], [11.3, 287.0], [11.4, 287.0], [11.5, 287.0], [11.6, 287.0], [11.7, 287.0], [11.8, 288.0], [11.9, 288.0], [12.0, 288.0], [12.1, 288.0], [12.2, 288.0], [12.3, 288.0], [12.4, 288.0], [12.5, 288.0], [12.6, 288.0], [12.7, 288.0], [12.8, 288.0], [12.9, 288.0], [13.0, 288.0], [13.1, 288.0], [13.2, 288.0], [13.3, 288.0], [13.4, 288.0], [13.5, 289.0], [13.6, 289.0], [13.7, 289.0], [13.8, 289.0], [13.9, 289.0], [14.0, 289.0], [14.1, 289.0], [14.2, 289.0], [14.3, 289.0], [14.4, 289.0], [14.5, 289.0], [14.6, 289.0], [14.7, 289.0], [14.8, 289.0], [14.9, 289.0], [15.0, 290.0], [15.1, 290.0], [15.2, 290.0], [15.3, 290.0], [15.4, 290.0], [15.5, 291.0], [15.6, 291.0], [15.7, 291.0], [15.8, 291.0], [15.9, 291.0], [16.0, 292.0], [16.1, 292.0], [16.2, 292.0], [16.3, 292.0], [16.4, 292.0], [16.5, 293.0], [16.6, 293.0], [16.7, 293.0], [16.8, 293.0], [16.9, 293.0], [17.0, 293.0], [17.1, 293.0], [17.2, 293.0], [17.3, 294.0], [17.4, 294.0], [17.5, 294.0], [17.6, 294.0], [17.7, 294.0], [17.8, 294.0], [17.9, 294.0], [18.0, 294.0], [18.1, 294.0], [18.2, 294.0], [18.3, 295.0], [18.4, 295.0], [18.5, 295.0], [18.6, 295.0], [18.7, 295.0], [18.8, 295.0], [18.9, 295.0], [19.0, 296.0], [19.1, 296.0], [19.2, 296.0], [19.3, 296.0], [19.4, 296.0], [19.5, 296.0], [19.6, 296.0], [19.7, 296.0], [19.8, 297.0], [19.9, 297.0], [20.0, 297.0], [20.1, 297.0], [20.2, 298.0], [20.3, 298.0], [20.4, 298.0], [20.5, 299.0], [20.6, 299.0], [20.7, 299.0], [20.8, 299.0], [20.9, 299.0], [21.0, 299.0], [21.1, 299.0], [21.2, 299.0], [21.3, 299.0], [21.4, 299.0], [21.5, 299.0], [21.6, 299.0], [21.7, 300.0], [21.8, 300.0], [21.9, 300.0], [22.0, 300.0], [22.1, 300.0], [22.2, 300.0], [22.3, 300.0], [22.4, 300.0], [22.5, 301.0], [22.6, 301.0], [22.7, 301.0], [22.8, 301.0], [22.9, 301.0], [23.0, 302.0], [23.1, 302.0], [23.2, 303.0], [23.3, 303.0], [23.4, 303.0], [23.5, 303.0], [23.6, 303.0], [23.7, 304.0], [23.8, 304.0], [23.9, 304.0], [24.0, 304.0], [24.1, 304.0], [24.2, 304.0], [24.3, 304.0], [24.4, 304.0], [24.5, 304.0], [24.6, 304.0], [24.7, 304.0], [24.8, 304.0], [24.9, 304.0], [25.0, 304.0], [25.1, 304.0], [25.2, 304.0], [25.3, 304.0], [25.4, 304.0], [25.5, 304.0], [25.6, 304.0], [25.7, 305.0], [25.8, 305.0], [25.9, 305.0], [26.0, 306.0], [26.1, 306.0], [26.2, 307.0], [26.3, 307.0], [26.4, 307.0], [26.5, 307.0], [26.6, 307.0], [26.7, 307.0], [26.8, 307.0], [26.9, 307.0], [27.0, 308.0], [27.1, 308.0], [27.2, 308.0], [27.3, 308.0], [27.4, 308.0], [27.5, 308.0], [27.6, 308.0], [27.7, 310.0], [27.8, 310.0], [27.9, 310.0], [28.0, 312.0], [28.1, 312.0], [28.2, 313.0], [28.3, 313.0], [28.4, 313.0], [28.5, 314.0], [28.6, 314.0], [28.7, 314.0], [28.8, 314.0], [28.9, 314.0], [29.0, 316.0], [29.1, 316.0], [29.2, 316.0], [29.3, 316.0], [29.4, 316.0], [29.5, 316.0], [29.6, 316.0], [29.7, 317.0], [29.8, 317.0], [29.9, 317.0], [30.0, 318.0], [30.1, 318.0], [30.2, 319.0], [30.3, 319.0], [30.4, 319.0], [30.5, 319.0], [30.6, 319.0], [30.7, 319.0], [30.8, 319.0], [30.9, 319.0], [31.0, 319.0], [31.1, 319.0], [31.2, 320.0], [31.3, 320.0], [31.4, 320.0], [31.5, 323.0], [31.6, 323.0], [31.7, 325.0], [31.8, 325.0], [31.9, 325.0], [32.0, 325.0], [32.1, 325.0], [32.2, 327.0], [32.3, 327.0], [32.4, 327.0], [32.5, 327.0], [32.6, 327.0], [32.7, 328.0], [32.8, 328.0], [32.9, 328.0], [33.0, 329.0], [33.1, 329.0], [33.2, 329.0], [33.3, 329.0], [33.4, 329.0], [33.5, 330.0], [33.6, 330.0], [33.7, 330.0], [33.8, 330.0], [33.9, 330.0], [34.0, 331.0], [34.1, 331.0], [34.2, 331.0], [34.3, 331.0], [34.4, 331.0], [34.5, 333.0], [34.6, 333.0], [34.7, 333.0], [34.8, 333.0], [34.9, 333.0], [35.0, 334.0], [35.1, 334.0], [35.2, 338.0], [35.3, 338.0], [35.4, 338.0], [35.5, 338.0], [35.6, 338.0], [35.7, 338.0], [35.8, 338.0], [35.9, 338.0], [36.0, 339.0], [36.1, 339.0], [36.2, 340.0], [36.3, 340.0], [36.4, 340.0], [36.5, 340.0], [36.6, 340.0], [36.7, 342.0], [36.8, 342.0], [36.9, 342.0], [37.0, 344.0], [37.1, 344.0], [37.2, 346.0], [37.3, 346.0], [37.4, 346.0], [37.5, 346.0], [37.6, 346.0], [37.7, 347.0], [37.8, 347.0], [37.9, 347.0], [38.0, 347.0], [38.1, 347.0], [38.2, 349.0], [38.3, 349.0], [38.4, 349.0], [38.5, 354.0], [38.6, 354.0], [38.7, 355.0], [38.8, 355.0], [38.9, 355.0], [39.0, 355.0], [39.1, 355.0], [39.2, 359.0], [39.3, 359.0], [39.4, 359.0], [39.5, 361.0], [39.6, 361.0], [39.7, 361.0], [39.8, 361.0], [39.9, 361.0], [40.0, 361.0], [40.1, 361.0], [40.2, 362.0], [40.3, 362.0], [40.4, 365.0], [40.5, 365.0], [40.6, 365.0], [40.7, 367.0], [40.8, 367.0], [40.9, 369.0], [41.0, 369.0], [41.1, 369.0], [41.2, 369.0], [41.3, 369.0], [41.4, 374.0], [41.5, 374.0], [41.6, 374.0], [41.7, 377.0], [41.8, 377.0], [41.9, 379.0], [42.0, 379.0], [42.1, 379.0], [42.2, 381.0], [42.3, 381.0], [42.4, 381.0], [42.5, 381.0], [42.6, 381.0], [42.7, 383.0], [42.8, 383.0], [42.9, 384.0], [43.0, 384.0], [43.1, 384.0], [43.2, 390.0], [43.3, 390.0], [43.4, 393.0], [43.5, 393.0], [43.6, 393.0], [43.7, 395.0], [43.8, 395.0], [43.9, 399.0], [44.0, 399.0], [44.1, 399.0], [44.2, 401.0], [44.3, 401.0], [44.4, 406.0], [44.5, 406.0], [44.6, 406.0], [44.7, 408.0], [44.8, 408.0], [44.9, 410.0], [45.0, 410.0], [45.1, 410.0], [45.2, 412.0], [45.3, 412.0], [45.4, 417.0], [45.5, 417.0], [45.6, 417.0], [45.7, 422.0], [45.8, 422.0], [45.9, 424.0], [46.0, 424.0], [46.1, 424.0], [46.2, 427.0], [46.3, 427.0], [46.4, 430.0], [46.5, 430.0], [46.6, 430.0], [46.7, 436.0], [46.8, 436.0], [46.9, 437.0], [47.0, 437.0], [47.1, 437.0], [47.2, 439.0], [47.3, 439.0], [47.4, 440.0], [47.5, 440.0], [47.6, 440.0], [47.7, 442.0], [47.8, 442.0], [47.9, 443.0], [48.0, 443.0], [48.1, 443.0], [48.2, 444.0], [48.3, 444.0], [48.4, 446.0], [48.5, 446.0], [48.6, 446.0], [48.7, 446.0], [48.8, 446.0], [48.9, 448.0], [49.0, 448.0], [49.1, 448.0], [49.2, 450.0], [49.3, 450.0], [49.4, 450.0], [49.5, 450.0], [49.6, 450.0], [49.7, 452.0], [49.8, 452.0], [49.9, 452.0], [50.0, 452.0], [50.1, 452.0], [50.2, 455.0], [50.3, 455.0], [50.4, 456.0], [50.5, 456.0], [50.6, 456.0], [50.7, 457.0], [50.8, 457.0], [50.9, 457.0], [51.0, 457.0], [51.1, 457.0], [51.2, 458.0], [51.3, 458.0], [51.4, 460.0], [51.5, 460.0], [51.6, 460.0], [51.7, 460.0], [51.8, 460.0], [51.9, 460.0], [52.0, 460.0], [52.1, 460.0], [52.2, 461.0], [52.3, 461.0], [52.4, 462.0], [52.5, 462.0], [52.6, 462.0], [52.7, 463.0], [52.8, 463.0], [52.9, 463.0], [53.0, 463.0], [53.1, 463.0], [53.2, 466.0], [53.3, 466.0], [53.4, 468.0], [53.5, 468.0], [53.6, 468.0], [53.7, 475.0], [53.8, 475.0], [53.9, 477.0], [54.0, 477.0], [54.1, 477.0], [54.2, 477.0], [54.3, 477.0], [54.4, 477.0], [54.5, 477.0], [54.6, 477.0], [54.7, 478.0], [54.8, 478.0], [54.9, 480.0], [55.0, 480.0], [55.1, 480.0], [55.2, 481.0], [55.3, 481.0], [55.4, 482.0], [55.5, 482.0], [55.6, 482.0], [55.7, 482.0], [55.8, 482.0], [55.9, 483.0], [56.0, 483.0], [56.1, 483.0], [56.2, 483.0], [56.3, 483.0], [56.4, 484.0], [56.5, 484.0], [56.6, 484.0], [56.7, 485.0], [56.8, 485.0], [56.9, 485.0], [57.0, 485.0], [57.1, 485.0], [57.2, 486.0], [57.3, 486.0], [57.4, 488.0], [57.5, 488.0], [57.6, 488.0], [57.7, 488.0], [57.8, 488.0], [57.9, 488.0], [58.0, 488.0], [58.1, 488.0], [58.2, 488.0], [58.3, 488.0], [58.4, 488.0], [58.5, 488.0], [58.6, 488.0], [58.7, 489.0], [58.8, 489.0], [58.9, 489.0], [59.0, 489.0], [59.1, 489.0], [59.2, 490.0], [59.3, 490.0], [59.4, 490.0], [59.5, 490.0], [59.6, 490.0], [59.7, 490.0], [59.8, 490.0], [59.9, 494.0], [60.0, 494.0], [60.1, 494.0], [60.2, 494.0], [60.3, 494.0], [60.4, 495.0], [60.5, 495.0], [60.6, 498.0], [60.7, 498.0], [60.8, 498.0], [60.9, 499.0], [61.0, 499.0], [61.1, 500.0], [61.2, 500.0], [61.3, 500.0], [61.4, 502.0], [61.5, 502.0], [61.6, 503.0], [61.7, 503.0], [61.8, 503.0], [61.9, 504.0], [62.0, 504.0], [62.1, 505.0], [62.2, 505.0], [62.3, 505.0], [62.4, 506.0], [62.5, 506.0], [62.6, 509.0], [62.7, 509.0], [62.8, 509.0], [62.9, 511.0], [63.0, 511.0], [63.1, 511.0], [63.2, 511.0], [63.3, 511.0], [63.4, 512.0], [63.5, 512.0], [63.6, 513.0], [63.7, 513.0], [63.8, 513.0], [63.9, 514.0], [64.0, 514.0], [64.1, 518.0], [64.2, 518.0], [64.3, 518.0], [64.4, 518.0], [64.5, 518.0], [64.6, 519.0], [64.7, 519.0], [64.8, 519.0], [64.9, 519.0], [65.0, 519.0], [65.1, 519.0], [65.2, 519.0], [65.3, 519.0], [65.4, 519.0], [65.5, 519.0], [65.6, 520.0], [65.7, 520.0], [65.8, 520.0], [65.9, 520.0], [66.0, 520.0], [66.1, 522.0], [66.2, 522.0], [66.3, 522.0], [66.4, 524.0], [66.5, 524.0], [66.6, 525.0], [66.7, 525.0], [66.8, 525.0], [66.9, 525.0], [67.0, 525.0], [67.1, 527.0], [67.2, 527.0], [67.3, 527.0], [67.4, 527.0], [67.5, 527.0], [67.6, 532.0], [67.7, 532.0], [67.8, 532.0], [67.9, 532.0], [68.0, 532.0], [68.1, 534.0], [68.2, 534.0], [68.3, 534.0], [68.4, 535.0], [68.5, 535.0], [68.6, 536.0], [68.7, 536.0], [68.8, 536.0], [68.9, 539.0], [69.0, 539.0], [69.1, 540.0], [69.2, 540.0], [69.3, 540.0], [69.4, 541.0], [69.5, 541.0], [69.6, 541.0], [69.7, 541.0], [69.8, 541.0], [69.9, 543.0], [70.0, 543.0], [70.1, 543.0], [70.2, 543.0], [70.3, 543.0], [70.4, 543.0], [70.5, 543.0], [70.6, 544.0], [70.7, 544.0], [70.8, 544.0], [70.9, 544.0], [71.0, 544.0], [71.1, 546.0], [71.2, 546.0], [71.3, 546.0], [71.4, 546.0], [71.5, 546.0], [71.6, 546.0], [71.7, 546.0], [71.8, 546.0], [71.9, 546.0], [72.0, 546.0], [72.1, 546.0], [72.2, 546.0], [72.3, 546.0], [72.4, 547.0], [72.5, 547.0], [72.6, 547.0], [72.7, 547.0], [72.8, 547.0], [72.9, 548.0], [73.0, 548.0], [73.1, 549.0], [73.2, 549.0], [73.3, 549.0], [73.4, 549.0], [73.5, 549.0], [73.6, 550.0], [73.7, 550.0], [73.8, 550.0], [73.9, 551.0], [74.0, 551.0], [74.1, 551.0], [74.2, 551.0], [74.3, 551.0], [74.4, 551.0], [74.5, 551.0], [74.6, 554.0], [74.7, 554.0], [74.8, 554.0], [74.9, 555.0], [75.0, 555.0], [75.1, 555.0], [75.2, 555.0], [75.3, 555.0], [75.4, 556.0], [75.5, 556.0], [75.6, 556.0], [75.7, 556.0], [75.8, 556.0], [75.9, 558.0], [76.0, 558.0], [76.1, 559.0], [76.2, 559.0], [76.3, 559.0], [76.4, 560.0], [76.5, 560.0], [76.6, 562.0], [76.7, 562.0], [76.8, 562.0], [76.9, 562.0], [77.0, 562.0], [77.1, 563.0], [77.2, 563.0], [77.3, 563.0], [77.4, 564.0], [77.5, 564.0], [77.6, 567.0], [77.7, 567.0], [77.8, 567.0], [77.9, 572.0], [78.0, 572.0], [78.1, 572.0], [78.2, 572.0], [78.3, 572.0], [78.4, 576.0], [78.5, 576.0], [78.6, 577.0], [78.7, 577.0], [78.8, 577.0], [78.9, 577.0], [79.0, 577.0], [79.1, 577.0], [79.2, 577.0], [79.3, 577.0], [79.4, 578.0], [79.5, 578.0], [79.6, 579.0], [79.7, 579.0], [79.8, 579.0], [79.9, 583.0], [80.0, 583.0], [80.1, 585.0], [80.2, 585.0], [80.3, 587.0], [80.4, 587.0], [80.5, 587.0], [80.6, 591.0], [80.7, 591.0], [80.8, 592.0], [80.9, 592.0], [81.0, 592.0], [81.1, 592.0], [81.2, 592.0], [81.3, 594.0], [81.4, 594.0], [81.5, 594.0], [81.6, 595.0], [81.7, 595.0], [81.8, 595.0], [81.9, 595.0], [82.0, 595.0], [82.1, 598.0], [82.2, 598.0], [82.3, 602.0], [82.4, 602.0], [82.5, 602.0], [82.6, 613.0], [82.7, 613.0], [82.8, 614.0], [82.9, 614.0], [83.0, 614.0], [83.1, 615.0], [83.2, 615.0], [83.3, 615.0], [83.4, 615.0], [83.5, 615.0], [83.6, 616.0], [83.7, 616.0], [83.8, 616.0], [83.9, 616.0], [84.0, 616.0], [84.1, 618.0], [84.2, 618.0], [84.3, 620.0], [84.4, 620.0], [84.5, 620.0], [84.6, 622.0], [84.7, 622.0], [84.8, 624.0], [84.9, 624.0], [85.0, 624.0], [85.1, 625.0], [85.2, 625.0], [85.3, 629.0], [85.4, 629.0], [85.5, 629.0], [85.6, 635.0], [85.7, 635.0], [85.8, 638.0], [85.9, 638.0], [86.0, 638.0], [86.1, 644.0], [86.2, 644.0], [86.3, 661.0], [86.4, 661.0], [86.5, 661.0], [86.6, 675.0], [86.7, 675.0], [86.8, 680.0], [86.9, 680.0], [87.0, 680.0], [87.1, 689.0], [87.2, 689.0], [87.3, 911.0], [87.4, 911.0], [87.5, 911.0], [87.6, 918.0], [87.7, 918.0], [87.8, 920.0], [87.9, 920.0], [88.0, 920.0], [88.1, 939.0], [88.2, 939.0], [88.3, 950.0], [88.4, 950.0], [88.5, 950.0], [88.6, 956.0], [88.7, 956.0], [88.8, 957.0], [88.9, 957.0], [89.0, 957.0], [89.1, 959.0], [89.2, 959.0], [89.3, 961.0], [89.4, 961.0], [89.5, 961.0], [89.6, 963.0], [89.7, 963.0], [89.8, 970.0], [89.9, 970.0], [90.0, 970.0], [90.1, 972.0], [90.2, 972.0], [90.3, 974.0], [90.4, 974.0], [90.5, 974.0], [90.6, 975.0], [90.7, 975.0], [90.8, 976.0], [90.9, 976.0], [91.0, 976.0], [91.1, 976.0], [91.2, 976.0], [91.3, 977.0], [91.4, 977.0], [91.5, 977.0], [91.6, 978.0], [91.7, 978.0], [91.8, 978.0], [91.9, 978.0], [92.0, 978.0], [92.1, 979.0], [92.2, 979.0], [92.3, 981.0], [92.4, 981.0], [92.5, 981.0], [92.6, 982.0], [92.7, 982.0], [92.8, 984.0], [92.9, 984.0], [93.0, 984.0], [93.1, 984.0], [93.2, 984.0], [93.3, 985.0], [93.4, 985.0], [93.5, 985.0], [93.6, 986.0], [93.7, 986.0], [93.8, 986.0], [93.9, 986.0], [94.0, 986.0], [94.1, 989.0], [94.2, 989.0], [94.3, 991.0], [94.4, 991.0], [94.5, 991.0], [94.6, 994.0], [94.7, 994.0], [94.8, 1008.0], [94.9, 1008.0], [95.0, 1008.0], [95.1, 1016.0], [95.2, 1016.0], [95.3, 1032.0], [95.4, 1032.0], [95.5, 1032.0], [95.6, 1036.0], [95.7, 1036.0], [95.8, 1040.0], [95.9, 1040.0], [96.0, 1040.0], [96.1, 1044.0], [96.2, 1044.0], [96.3, 1049.0], [96.4, 1049.0], [96.5, 1049.0], [96.6, 1051.0], [96.7, 1051.0], [96.8, 1055.0], [96.9, 1055.0], [97.0, 1055.0], [97.1, 1056.0], [97.2, 1056.0], [97.3, 1057.0], [97.4, 1057.0], [97.5, 1057.0], [97.6, 1061.0], [97.7, 1061.0], [97.8, 1063.0], [97.9, 1063.0], [98.0, 1063.0], [98.1, 1089.0], [98.2, 1089.0], [98.3, 1091.0], [98.4, 1091.0], [98.5, 1091.0], [98.6, 1097.0], [98.7, 1097.0], [98.8, 1098.0], [98.9, 1098.0], [99.0, 1098.0], [99.1, 1110.0], [99.2, 1110.0], [99.3, 1130.0], [99.4, 1130.0], [99.5, 1130.0], [99.6, 1133.0], [99.7, 1133.0], [99.8, 127323.0], [99.9, 127323.0]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 245.0, "series": [{"data": [[4500.0, 90.0], [2500.0, 26.0], [5000.0, 31.0], [3000.0, 41.0], [3500.0, 95.0], [127500.0, 2.0], [2000.0, 6.0], [4000.0, 111.0]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[132000.0, 2.0], [0.0, 3.0], [140000.0, 1.0], [67500.0, 1.0], [75500.0, 1.0], [87500.0, 1.0], [91500.0, 3.0], [95500.0, 2.0], [99500.0, 1.0], [103500.0, 4.0], [107500.0, 1.0], [111500.0, 3.0], [115500.0, 1.0], [119500.0, 4.0], [123500.0, 1.0], [127500.0, 1.0], [145000.0, 1.0], [131500.0, 2.0], [36500.0, 1.0], [38500.0, 1.0], [42500.0, 3.0], [44500.0, 1.0], [46500.0, 2.0], [48500.0, 2.0], [50500.0, 2.0], [52500.0, 2.0], [54500.0, 1.0], [56500.0, 1.0], [58500.0, 2.0], [62500.0, 1.0], [73000.0, 4.0], [81000.0, 1.0], [85000.0, 1.0], [89000.0, 2.0], [97000.0, 1.0], [105000.0, 2.0], [109000.0, 3.0], [117000.0, 4.0], [125000.0, 1.0], [129000.0, 3.0], [66500.0, 3.0], [4500.0, 2.0], [78500.0, 2.0], [5000.0, 1.0], [82500.0, 5.0], [86500.0, 4.0], [90500.0, 1.0], [94500.0, 3.0], [6000.0, 1.0], [98500.0, 3.0], [102500.0, 2.0], [106500.0, 3.0], [110500.0, 3.0], [114500.0, 5.0], [118500.0, 2.0], [122500.0, 4.0], [126500.0, 1.0], [130500.0, 1.0], [9000.0, 2.0], [9500.0, 5.0], [12000.0, 5.0], [12500.0, 1.0], [13500.0, 2.0], [14000.0, 4.0], [14500.0, 6.0], [15000.0, 3.0], [15500.0, 5.0], [16000.0, 1.0], [17000.0, 1.0], [18000.0, 3.0], [19000.0, 1.0], [20000.0, 1.0], [21000.0, 3.0], [22000.0, 2.0], [23000.0, 2.0], [24000.0, 1.0], [25000.0, 1.0], [27000.0, 1.0], [28000.0, 3.0], [29000.0, 1.0], [31000.0, 3.0], [32000.0, 2.0], [34000.0, 2.0], [36000.0, 3.0], [38000.0, 1.0], [42000.0, 1.0], [44000.0, 1.0], [46000.0, 2.0], [50000.0, 2.0], [52000.0, 2.0], [54000.0, 2.0], [56000.0, 2.0], [58000.0, 1.0], [60000.0, 1.0], [62000.0, 1.0], [64000.0, 2.0], [72000.0, 4.0], [76000.0, 3.0], [84000.0, 1.0], [88000.0, 1.0], [92000.0, 2.0], [96000.0, 2.0], [100000.0, 3.0], [108000.0, 2.0], [116000.0, 1.0], [120000.0, 2.0], [124000.0, 1.0], [128000.0, 1.0], [69500.0, 2.0], [73500.0, 2.0], [77500.0, 2.0], [81500.0, 3.0], [85500.0, 4.0], [89500.0, 2.0], [93500.0, 2.0], [97500.0, 4.0], [105500.0, 1.0], [109500.0, 1.0], [113500.0, 3.0], [117500.0, 2.0], [121500.0, 1.0], [125500.0, 3.0], [129500.0, 1.0], [33500.0, 3.0], [35500.0, 2.0], [37500.0, 1.0], [39500.0, 5.0], [41500.0, 2.0], [43500.0, 2.0], [45500.0, 2.0], [47500.0, 2.0], [49500.0, 1.0], [53500.0, 3.0], [55500.0, 1.0], [57500.0, 2.0], [59500.0, 2.0], [61500.0, 2.0], [63500.0, 3.0], [65500.0, 2.0], [67000.0, 1.0], [75000.0, 2.0], [79000.0, 3.0], [91000.0, 2.0], [95000.0, 1.0], [99000.0, 1.0], [103000.0, 1.0], [111000.0, 3.0], [115000.0, 1.0], [123000.0, 1.0], [68500.0, 4.0], [76500.0, 1.0], [84500.0, 1.0], [88500.0, 4.0], [96500.0, 1.0], [100500.0, 2.0], [108500.0, 3.0], [112500.0, 1.0], [116500.0, 1.0], [120500.0, 2.0], [124500.0, 2.0], [128500.0, 3.0], [17500.0, 2.0], [18500.0, 3.0], [19500.0, 1.0], [20500.0, 1.0], [21500.0, 1.0], [22500.0, 2.0], [24500.0, 3.0], [25500.0, 3.0], [27500.0, 2.0], [28500.0, 3.0], [29500.0, 1.0], [30500.0, 2.0], [31500.0, 1.0], [32500.0, 3.0], [35000.0, 1.0], [37000.0, 1.0], [39000.0, 1.0], [41000.0, 1.0], [43000.0, 1.0], [47000.0, 2.0], [49000.0, 2.0], [51000.0, 1.0], [55000.0, 2.0], [57000.0, 2.0], [59000.0, 1.0], [61000.0, 1.0], [63000.0, 1.0], [65000.0, 2.0], [66000.0, 1.0], [70000.0, 3.0], [78000.0, 2.0], [82000.0, 1.0], [94000.0, 1.0], [102000.0, 3.0], [106000.0, 4.0], [118000.0, 1.0], [122000.0, 1.0], [126000.0, 2.0]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[0.0, 245.0], [127000.0, 1.0], [500.0, 135.0], [1000.0, 20.0]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 145000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 794.0, "series": [{"data": [[1.0, 153.0]], "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[3.0, 12.0]], "isOverall": false, "label": "Requests in error", "isController": false}, {"data": [[0.0, 244.0]], "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[2.0, 794.0]], "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.51528284E12, "maxY": 199.71153846153845, "series": [{"data": [[1.51528296E12, 1.0], [1.51528392E12, 140.0], [1.51528566E12, 24.5], [1.51528284E12, 1.0], [1.51528332E12, 1.0], [1.5152856E12, 91.0], [1.51528398E12, 48.0], [1.51528386E12, 199.71153846153845], [1.51528554E12, 195.2655246252676]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51528566E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 488.75999999999976, "minX": 1.0, "maxY": 138793.5, "series": [{"data": [[1.0, 127682.5], [200.0, 4084.0250000000005]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[199.00995024875624, 4698.9427860696505]], "isOverall": false, "label": "GenerateVerifiactionCode-Aggregated", "isController": false}, {"data": [[2.0, 136267.0], [3.0, 130897.5], [4.0, 130521.0], [5.0, 129722.5], [6.0, 128565.5], [7.0, 127862.0], [8.0, 127598.0], [9.0, 127118.5], [10.0, 126256.0], [11.0, 125426.5], [12.0, 124601.5], [13.0, 124216.5], [14.0, 123737.5], [15.0, 122900.5], [16.0, 122008.5], [17.0, 121612.5], [18.0, 121290.5], [19.0, 120826.0], [20.0, 120074.0], [21.0, 119180.0], [22.0, 118479.0], [23.0, 118126.0], [24.0, 117780.0], [25.0, 116901.5], [26.0, 116459.5], [27.0, 115608.5], [28.0, 115462.5], [29.0, 114849.0], [30.0, 113942.0], [31.0, 113244.0], [33.0, 112721.5], [32.0, 112883.5], [35.0, 111211.0], [34.0, 112164.0], [37.0, 110072.5], [36.0, 110299.5], [39.0, 109116.0], [38.0, 110023.0], [41.0, 107636.0], [40.0, 108503.0], [43.0, 107352.5], [42.0, 107455.5], [45.0, 105321.5], [44.0, 106184.5], [47.0, 104325.5], [46.0, 104482.0], [49.0, 103507.0], [48.0, 104336.5], [51.0, 101459.0], [50.0, 102569.0], [53.0, 101264.0], [52.0, 101421.5], [55.0, 99805.0], [54.0, 100585.5], [57.0, 98090.0], [56.0, 98487.0], [59.0, 97255.0], [58.0, 97977.0], [61.0, 95047.0], [60.0, 96401.0], [63.0, 94590.0], [62.0, 94905.0], [67.0, 92219.5], [66.0, 92282.5], [65.0, 93223.0], [64.0, 94094.0], [71.0, 89091.5], [70.0, 90277.0], [69.0, 91273.0], [68.0, 91854.0], [75.0, 86397.5], [74.0, 88060.0], [73.0, 88631.5], [72.0, 89062.5], [79.0, 84965.5], [78.0, 85125.5], [77.0, 85672.0], [76.0, 85823.5], [83.0, 81720.0], [82.0, 81978.5], [81.0, 82417.5], [80.0, 83014.5], [87.0, 78153.0], [86.0, 78290.5], [85.0, 79816.5], [84.0, 81083.5], [91.0, 74773.0], [90.0, 76640.5], [89.0, 76959.5], [88.0, 77683.0], [95.0, 72794.5], [94.0, 73373.0], [93.0, 73689.0], [92.0, 74763.0], [99.0, 70516.0], [98.0, 70838.5], [97.0, 71359.5], [96.0, 71582.0], [103.0, 67793.5], [102.0, 68468.5], [101.0, 68612.0], [100.0, 69770.0], [107.0, 64820.5], [106.0, 65170.0], [105.0, 66698.0], [104.0, 67345.5], [111.0, 61983.5], [110.0, 62867.0], [109.0, 63338.5], [108.0, 64151.0], [115.0, 59645.5], [114.0, 60269.0], [113.0, 60961.5], [112.0, 61603.5], [119.0, 56913.5], [118.0, 57763.0], [117.0, 58675.5], [116.0, 58951.0], [123.0, 53953.5], [122.0, 54716.0], [121.0, 55138.0], [120.0, 56176.0], [127.0, 51417.0], [126.0, 52183.0], [125.0, 52602.5], [124.0, 53474.5], [135.0, 45192.5], [134.0, 46558.5], [133.0, 47385.0], [132.0, 47868.5], [131.0, 48443.0], [130.0, 48869.5], [129.0, 50329.0], [128.0, 50844.5], [143.0, 40610.5], [142.0, 40833.0], [141.0, 41422.0], [140.0, 42077.0], [139.0, 42930.5], [138.0, 43845.0], [137.0, 43974.0], [136.0, 44673.0], [151.0, 35374.5], [150.0, 36378.5], [149.0, 36757.5], [148.0, 37832.0], [147.0, 37969.5], [146.0, 38509.5], [145.0, 39109.0], [144.0, 39472.5], [159.0, 30142.0], [158.0, 31560.5], [157.0, 31884.5], [156.0, 32121.5], [155.0, 32749.0], [154.0, 33166.5], [153.0, 34757.0], [152.0, 35108.5], [167.0, 24844.0], [166.0, 25341.0], [165.0, 26301.0], [164.0, 26856.0], [163.0, 27764.0], [162.0, 27845.5], [161.0, 28504.5], [160.0, 29418.5], [175.0, 20354.5], [174.0, 20899.0], [173.0, 21476.5], [172.0, 21937.5], [171.0, 22329.5], [170.0, 23275.5], [169.0, 24003.0], [168.0, 24564.5], [183.0, 16614.5], [182.0, 16796.0], [181.0, 17087.0], [180.0, 18087.0], [179.0, 18068.5], [178.0, 18999.5], [177.0, 19160.5], [176.0, 19388.0], [191.0, 12557.0], [190.0, 14380.5], [189.0, 14405.5], [188.0, 14830.5], [187.0, 14982.5], [186.0, 15151.0], [185.0, 16015.0], [184.0, 16312.0], [199.0, 4971.0], [198.0, 4857.0], [197.0, 7406.5], [196.0, 7347.0], [195.0, 8592.0], [194.0, 9090.5], [193.0, 11054.0], [192.0, 11208.0], [200.0, 4804.5], [1.0, 138793.5]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[100.49999999999996, 69046.82749999997]], "isOverall": false, "label": "Register-Aggregated", "isController": false}, {"data": [[1.0, 127323.0], [200.0, 488.75999999999976]], "isOverall": false, "label": "verifyUser", "isController": false}, {"data": [[199.503740648379, 805.0548628428922]], "isOverall": false, "label": "verifyUser-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.51528284E12, "maxY": 4613.9, "series": [{"data": [[1.51528296E12, 38.733333333333334], [1.51528392E12, 2660.383333333333], [1.51528566E12, 1448.8], [1.51528284E12, 38.733333333333334], [1.51528332E12, 38.733333333333334], [1.5152856E12, 2542.25], [1.51528398E12, 2844.0833333333335], [1.51528386E12, 3245.4666666666667], [1.51528554E12, 4613.9]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.51528296E12, 0.0], [1.51528392E12, 878.1333333333333], [1.51528566E12, 473.6], [1.51528284E12, 0.0], [1.51528332E12, 0.0], [1.5152856E12, 838.6666666666666], [1.51528398E12, 937.3333333333334], [1.51528386E12, 1931.2], [1.51528554E12, 2432.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51528566E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 438.8149999999996, "minX": 1.51528284E12, "maxY": 127697.0, "series": [{"data": [[1.51528284E12, 127668.0], [1.51528332E12, 127697.0], [1.51528386E12, 3948.2900000000004], [1.51528554E12, 4219.76]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[1.51528392E12, 47573.550561797754], [1.51528566E12, 116326.47916666667], [1.5152856E12, 71533.49411764705], [1.51528398E12, 105708.44210526317], [1.51528386E12, 12767.249999999998], [1.51528554E12, 22001.328358208953]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[1.51528296E12, 127323.0], [1.51528386E12, 438.8149999999996], [1.51528554E12, 538.7050000000004]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51528566E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.51528284E12, "maxY": 116326.47916666667, "series": [{"data": [[1.51528284E12, 0.0], [1.51528332E12, 0.0], [1.51528386E12, 3948.2550000000015], [1.51528554E12, 4219.755]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[1.51528392E12, 47573.52808988763], [1.51528566E12, 116326.47916666667], [1.5152856E12, 71533.43529411763], [1.51528398E12, 105708.39999999997], [1.51528386E12, 12767.1875], [1.51528554E12, 22001.29850746269]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[1.51528296E12, 0.0], [1.51528386E12, 438.78999999999974], [1.51528554E12, 538.6650000000001]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51528566E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 165.68749999999997, "minX": 1.51528284E12, "maxY": 127697.0, "series": [{"data": [[1.51528284E12, 127668.0], [1.51528332E12, 127697.0], [1.51528386E12, 2437.994999999998], [1.51528554E12, 2404.560000000002]], "isOverall": false, "label": "GenerateVerifiactionCode", "isController": false}, {"data": [[1.51528392E12, 174.92134831460675], [1.51528566E12, 200.37500000000003], [1.5152856E12, 175.83529411764715], [1.51528398E12, 199.1789473684211], [1.51528386E12, 165.68749999999997], [1.51528554E12, 179.6567164179105]], "isOverall": false, "label": "Register", "isController": false}, {"data": [[1.51528296E12, 127323.0], [1.51528386E12, 265.9249999999999], [1.51528554E12, 182.14500000000015]], "isOverall": false, "label": "verifyUser", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51528566E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 259.0, "minX": 1.51528386E12, "maxY": 145359.0, "series": [{"data": [[1.51528392E12, 76314.0], [1.51528566E12, 145359.0], [1.5152856E12, 100648.0], [1.51528398E12, 132228.0], [1.51528386E12, 17733.0], [1.51528554E12, 41648.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.51528392E12, 18010.0], [1.51528566E12, 102106.0], [1.5152856E12, 42218.0], [1.51528398E12, 77952.0], [1.51528386E12, 259.0], [1.51528554E12, 263.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.51528392E12, 43289.5], [1.51528566E12, 96391.59999999998], [1.5152856E12, 82325.80000000008], [1.51528398E12, 98031.00000000003], [1.51528386E12, 4770.3], [1.51528554E12, 69701.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.51528392E12, 75029.54999999997], [1.51528566E12, 128808.95999999999], [1.5152856E12, 125911.92], [1.51528398E12, 129037.31999999998], [1.51528386E12, 15363.589999999997], [1.51528554E12, 126127.20000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.51528392E12, 60953.0], [1.51528566E12, 114245.5999999999], [1.5152856E12, 100271.8], [1.51528398E12, 115231.64999999994], [1.51528386E12, 5030.05], [1.51528554E12, 103513.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51528566E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 394.0, "minX": 0.0, "maxY": 127668.0, "series": [{"data": [[1.0, 75430.5], [0.0, 115450.5], [6.0, 2574.5], [7.0, 3661.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[0.0, 127668.0], [1.0, 89460.0], [7.0, 394.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 7.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 115450.5, "series": [{"data": [[1.0, 75430.5], [0.0, 115450.5], [6.0, 2574.5], [7.0, 3661.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[0.0, 0.0], [1.0, 89459.0], [7.0, 394.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 7.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.51528266E12, "maxY": 10.0, "series": [{"data": [[1.51528266E12, 0.016666666666666666], [1.51528284E12, 0.016666666666666666], [1.5152832E12, 0.016666666666666666], [1.51528386E12, 10.0], [1.51528554E12, 10.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51528554E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.51528284E12, "maxY": 7.783333333333333, "series": [{"data": [[1.51528392E12, 1.4833333333333334], [1.51528566E12, 0.8], [1.5152856E12, 1.4166666666666667], [1.51528398E12, 1.5833333333333333], [1.51528386E12, 6.933333333333334], [1.51528554E12, 7.783333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.51528296E12, 0.016666666666666666], [1.51528284E12, 0.016666666666666666], [1.51528332E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.ConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51528566E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.51528284E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.51528386E12, 3.3333333333333335], [1.51528554E12, 3.283333333333333]], "isOverall": false, "label": "verifyUser-success", "isController": false}, {"data": [[1.51528392E12, 1.4666666666666666], [1.51528566E12, 0.8], [1.5152856E12, 1.4], [1.51528398E12, 1.5666666666666667], [1.51528386E12, 0.26666666666666666], [1.51528554E12, 1.0666666666666667]], "isOverall": false, "label": "Register-success", "isController": false}, {"data": [[1.51528392E12, 0.016666666666666666], [1.5152856E12, 0.016666666666666666], [1.51528398E12, 0.016666666666666666], [1.51528554E12, 0.05]], "isOverall": false, "label": "Register-failure", "isController": false}, {"data": [[1.51528386E12, 3.3333333333333335], [1.51528554E12, 3.3333333333333335]], "isOverall": false, "label": "GenerateVerifiactionCode-success", "isController": false}, {"data": [[1.51528284E12, 0.016666666666666666], [1.51528332E12, 0.016666666666666666]], "isOverall": false, "label": "GenerateVerifiactionCode-failure", "isController": false}, {"data": [[1.51528296E12, 0.016666666666666666], [1.51528554E12, 0.05]], "isOverall": false, "label": "verifyUser-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51528566E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
