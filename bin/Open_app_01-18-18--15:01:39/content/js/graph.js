/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 0 : 0;
        var yOffset = options.yaxis.mode === "time" ? 0 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 307.0, "minX": 0.0, "maxY": 6826.0, "series": [{"data": [[0.0, 1878.0], [0.1, 1878.0], [0.2, 1953.0], [0.3, 1953.0], [0.4, 2016.0], [0.5, 2016.0], [0.6, 2016.0], [0.7, 2054.0], [0.8, 2067.0], [0.9, 2067.0], [1.0, 2170.0], [1.1, 2170.0], [1.2, 2269.0], [1.3, 2269.0], [1.4, 2284.0], [1.5, 2284.0], [1.6, 2293.0], [1.7, 2293.0], [1.8, 2311.0], [1.9, 2311.0], [2.0, 2316.0], [2.1, 2316.0], [2.2, 2469.0], [2.3, 2469.0], [2.4, 2501.0], [2.5, 2501.0], [2.6, 2628.0], [2.7, 2628.0], [2.8, 2628.0], [2.9, 2766.0], [3.0, 2766.0], [3.1, 2786.0], [3.2, 2786.0], [3.3, 2796.0], [3.4, 2796.0], [3.5, 2968.0], [3.6, 2968.0], [3.7, 2968.0], [3.8, 2968.0], [3.9, 2982.0], [4.0, 2982.0], [4.1, 2990.0], [4.2, 2990.0], [4.3, 2992.0], [4.4, 2992.0], [4.5, 2999.0], [4.6, 2999.0], [4.7, 3007.0], [4.8, 3007.0], [4.9, 3009.0], [5.0, 3009.0], [5.1, 3019.0], [5.2, 3019.0], [5.3, 3029.0], [5.4, 3029.0], [5.5, 3041.0], [5.6, 3041.0], [5.7, 3055.0], [5.8, 3055.0], [5.9, 3096.0], [6.0, 3096.0], [6.1, 3104.0], [6.2, 3104.0], [6.3, 3104.0], [6.4, 3104.0], [6.5, 3106.0], [6.6, 3106.0], [6.7, 3107.0], [6.8, 3107.0], [6.9, 3128.0], [7.0, 3128.0], [7.1, 3178.0], [7.2, 3178.0], [7.3, 3202.0], [7.4, 3202.0], [7.5, 3205.0], [7.6, 3205.0], [7.7, 3206.0], [7.8, 3206.0], [7.9, 3210.0], [8.0, 3210.0], [8.1, 3217.0], [8.2, 3217.0], [8.3, 3226.0], [8.4, 3226.0], [8.5, 3227.0], [8.6, 3227.0], [8.7, 3229.0], [8.8, 3229.0], [8.9, 3229.0], [9.0, 3229.0], [9.1, 3229.0], [9.2, 3229.0], [9.3, 3254.0], [9.4, 3260.0], [9.5, 3260.0], [9.6, 3265.0], [9.7, 3265.0], [9.8, 3298.0], [9.9, 3298.0], [10.0, 3310.0], [10.1, 3310.0], [10.2, 3311.0], [10.3, 3311.0], [10.4, 3322.0], [10.5, 3322.0], [10.6, 3325.0], [10.7, 3325.0], [10.8, 3326.0], [10.9, 3326.0], [11.0, 3352.0], [11.1, 3352.0], [11.2, 3356.0], [11.3, 3356.0], [11.4, 3385.0], [11.5, 3385.0], [11.6, 3400.0], [11.7, 3400.0], [11.8, 3415.0], [11.9, 3415.0], [12.0, 3416.0], [12.1, 3416.0], [12.2, 3420.0], [12.3, 3420.0], [12.4, 3426.0], [12.5, 3426.0], [12.6, 3462.0], [12.7, 3462.0], [12.8, 3466.0], [12.9, 3466.0], [13.0, 3467.0], [13.1, 3467.0], [13.2, 3469.0], [13.3, 3469.0], [13.4, 3510.0], [13.5, 3510.0], [13.6, 3514.0], [13.7, 3514.0], [13.8, 3517.0], [13.9, 3517.0], [14.0, 3522.0], [14.1, 3522.0], [14.2, 3531.0], [14.3, 3531.0], [14.4, 3540.0], [14.5, 3540.0], [14.6, 3543.0], [14.7, 3543.0], [14.8, 3575.0], [14.9, 3575.0], [15.0, 3579.0], [15.1, 3579.0], [15.2, 3584.0], [15.3, 3584.0], [15.4, 3587.0], [15.5, 3587.0], [15.6, 3590.0], [15.7, 3590.0], [15.8, 3593.0], [15.9, 3593.0], [16.0, 3594.0], [16.1, 3594.0], [16.2, 3598.0], [16.3, 3598.0], [16.4, 3624.0], [16.5, 3624.0], [16.6, 3629.0], [16.7, 3629.0], [16.8, 3668.0], [16.9, 3668.0], [17.0, 3676.0], [17.1, 3676.0], [17.2, 3676.0], [17.3, 3676.0], [17.4, 3691.0], [17.5, 3691.0], [17.6, 3693.0], [17.7, 3693.0], [17.8, 3706.0], [17.9, 3706.0], [18.0, 3707.0], [18.1, 3707.0], [18.2, 3712.0], [18.3, 3712.0], [18.4, 3721.0], [18.5, 3721.0], [18.6, 3723.0], [18.7, 3723.0], [18.8, 3772.0], [18.9, 3772.0], [19.0, 3791.0], [19.1, 3791.0], [19.2, 3806.0], [19.3, 3806.0], [19.4, 3818.0], [19.5, 3818.0], [19.6, 3818.0], [19.7, 3818.0], [19.8, 3820.0], [19.9, 3820.0], [20.0, 3821.0], [20.1, 3821.0], [20.2, 3822.0], [20.3, 3822.0], [20.4, 3825.0], [20.5, 3825.0], [20.6, 3840.0], [20.7, 3840.0], [20.8, 3841.0], [20.9, 3841.0], [21.0, 3844.0], [21.1, 3844.0], [21.2, 3848.0], [21.3, 3848.0], [21.4, 3848.0], [21.5, 3848.0], [21.6, 3848.0], [21.7, 3848.0], [21.8, 3855.0], [21.9, 3855.0], [22.0, 3862.0], [22.1, 3862.0], [22.2, 3870.0], [22.3, 3870.0], [22.4, 3873.0], [22.5, 3873.0], [22.6, 3876.0], [22.7, 3876.0], [22.8, 3908.0], [22.9, 3908.0], [23.0, 3915.0], [23.1, 3915.0], [23.2, 3921.0], [23.3, 3921.0], [23.4, 3933.0], [23.5, 3933.0], [23.6, 3943.0], [23.7, 3943.0], [23.8, 3943.0], [23.9, 3943.0], [24.0, 3946.0], [24.1, 3946.0], [24.2, 3947.0], [24.3, 3947.0], [24.4, 3953.0], [24.5, 3953.0], [24.6, 3957.0], [24.7, 3957.0], [24.8, 3958.0], [24.9, 3958.0], [25.0, 3996.0], [25.1, 3996.0], [25.2, 4003.0], [25.3, 4003.0], [25.4, 4010.0], [25.5, 4010.0], [25.6, 4011.0], [25.7, 4011.0], [25.8, 4019.0], [25.9, 4019.0], [26.0, 4028.0], [26.1, 4028.0], [26.2, 4043.0], [26.3, 4043.0], [26.4, 4051.0], [26.5, 4051.0], [26.6, 4052.0], [26.7, 4052.0], [26.8, 4060.0], [26.9, 4060.0], [27.0, 4084.0], [27.1, 4084.0], [27.2, 4091.0], [27.3, 4091.0], [27.4, 4110.0], [27.5, 4110.0], [27.6, 4121.0], [27.7, 4121.0], [27.8, 4125.0], [27.9, 4125.0], [28.0, 4129.0], [28.1, 4129.0], [28.2, 4131.0], [28.3, 4131.0], [28.4, 4132.0], [28.5, 4132.0], [28.6, 4136.0], [28.7, 4136.0], [28.8, 4149.0], [28.9, 4149.0], [29.0, 4158.0], [29.1, 4158.0], [29.2, 4180.0], [29.3, 4180.0], [29.4, 4190.0], [29.5, 4190.0], [29.6, 4193.0], [29.7, 4193.0], [29.8, 4198.0], [29.9, 4198.0], [30.0, 4202.0], [30.1, 4202.0], [30.2, 4205.0], [30.3, 4205.0], [30.4, 4211.0], [30.5, 4211.0], [30.6, 4213.0], [30.7, 4213.0], [30.8, 4217.0], [30.9, 4217.0], [31.0, 4217.0], [31.1, 4217.0], [31.2, 4218.0], [31.3, 4218.0], [31.4, 4220.0], [31.5, 4220.0], [31.6, 4221.0], [31.7, 4221.0], [31.8, 4227.0], [31.9, 4227.0], [32.0, 4227.0], [32.1, 4227.0], [32.2, 4231.0], [32.3, 4231.0], [32.4, 4233.0], [32.5, 4233.0], [32.6, 4235.0], [32.7, 4235.0], [32.8, 4242.0], [32.9, 4242.0], [33.0, 4247.0], [33.1, 4247.0], [33.2, 4249.0], [33.3, 4249.0], [33.4, 4251.0], [33.5, 4251.0], [33.6, 4253.0], [33.7, 4253.0], [33.8, 4257.0], [33.9, 4257.0], [34.0, 4270.0], [34.1, 4270.0], [34.2, 4273.0], [34.3, 4273.0], [34.4, 4284.0], [34.5, 4284.0], [34.6, 4305.0], [34.7, 4305.0], [34.8, 4306.0], [34.9, 4306.0], [35.0, 4321.0], [35.1, 4321.0], [35.2, 4326.0], [35.3, 4326.0], [35.4, 4328.0], [35.5, 4328.0], [35.6, 4334.0], [35.7, 4334.0], [35.8, 4334.0], [35.9, 4334.0], [36.0, 4337.0], [36.1, 4337.0], [36.2, 4337.0], [36.3, 4337.0], [36.4, 4340.0], [36.5, 4340.0], [36.6, 4343.0], [36.7, 4343.0], [36.8, 4345.0], [36.9, 4345.0], [37.0, 4356.0], [37.1, 4356.0], [37.2, 4358.0], [37.3, 4358.0], [37.4, 4376.0], [37.5, 4376.0], [37.6, 4376.0], [37.7, 4376.0], [37.8, 4379.0], [37.9, 4379.0], [38.0, 4394.0], [38.1, 4394.0], [38.2, 4401.0], [38.3, 4401.0], [38.4, 4401.0], [38.5, 4401.0], [38.6, 4430.0], [38.7, 4430.0], [38.8, 4433.0], [38.9, 4433.0], [39.0, 4434.0], [39.1, 4434.0], [39.2, 4434.0], [39.3, 4434.0], [39.4, 4438.0], [39.5, 4438.0], [39.6, 4439.0], [39.7, 4439.0], [39.8, 4439.0], [39.9, 4439.0], [40.0, 4442.0], [40.1, 4442.0], [40.2, 4451.0], [40.3, 4451.0], [40.4, 4454.0], [40.5, 4454.0], [40.6, 4454.0], [40.7, 4454.0], [40.8, 4456.0], [40.9, 4456.0], [41.0, 4464.0], [41.1, 4464.0], [41.2, 4470.0], [41.3, 4470.0], [41.4, 4470.0], [41.5, 4472.0], [41.6, 4472.0], [41.7, 4511.0], [41.8, 4511.0], [41.9, 4566.0], [42.0, 4566.0], [42.1, 4594.0], [42.2, 4594.0], [42.3, 4612.0], [42.4, 4612.0], [42.5, 4628.0], [42.6, 4628.0], [42.7, 4632.0], [42.8, 4632.0], [42.9, 4645.0], [43.0, 4645.0], [43.1, 4668.0], [43.2, 4668.0], [43.3, 4686.0], [43.4, 4686.0], [43.5, 4726.0], [43.6, 4726.0], [43.7, 4730.0], [43.8, 4730.0], [43.9, 4741.0], [44.0, 4741.0], [44.1, 4748.0], [44.2, 4748.0], [44.3, 4828.0], [44.4, 4828.0], [44.5, 4849.0], [44.6, 4849.0], [44.7, 4869.0], [44.8, 4869.0], [44.9, 4892.0], [45.0, 4892.0], [45.1, 4903.0], [45.2, 4903.0], [45.3, 4904.0], [45.4, 4904.0], [45.5, 4909.0], [45.6, 4909.0], [45.7, 4944.0], [45.8, 4944.0], [45.9, 4958.0], [46.0, 4958.0], [46.1, 4975.0], [46.2, 4975.0], [46.3, 4994.0], [46.4, 4994.0], [46.5, 5017.0], [46.6, 5017.0], [46.7, 5033.0], [46.8, 5033.0], [46.9, 5039.0], [47.0, 5039.0], [47.1, 5041.0], [47.2, 5041.0], [47.3, 5049.0], [47.4, 5049.0], [47.5, 5050.0], [47.6, 5050.0], [47.7, 5056.0], [47.8, 5056.0], [47.9, 5062.0], [48.0, 5062.0], [48.1, 5062.0], [48.2, 5062.0], [48.3, 5065.0], [48.4, 5065.0], [48.5, 5087.0], [48.6, 5087.0], [48.7, 5093.0], [48.8, 5093.0], [48.9, 5096.0], [49.0, 5096.0], [49.1, 5102.0], [49.2, 5102.0], [49.3, 5103.0], [49.4, 5103.0], [49.5, 5112.0], [49.6, 5112.0], [49.7, 5113.0], [49.8, 5113.0], [49.9, 5115.0], [50.0, 5115.0], [50.1, 5121.0], [50.2, 5121.0], [50.3, 5122.0], [50.4, 5122.0], [50.5, 5129.0], [50.6, 5129.0], [50.7, 5136.0], [50.8, 5136.0], [50.9, 5143.0], [51.0, 5143.0], [51.1, 5149.0], [51.2, 5149.0], [51.3, 5150.0], [51.4, 5150.0], [51.5, 5152.0], [51.6, 5152.0], [51.7, 5158.0], [51.8, 5158.0], [51.9, 5158.0], [52.0, 5158.0], [52.1, 5164.0], [52.2, 5164.0], [52.3, 5171.0], [52.4, 5171.0], [52.5, 5175.0], [52.6, 5175.0], [52.7, 5188.0], [52.8, 5188.0], [52.9, 5190.0], [53.0, 5190.0], [53.1, 5193.0], [53.2, 5193.0], [53.3, 5195.0], [53.4, 5195.0], [53.5, 5196.0], [53.6, 5196.0], [53.7, 5201.0], [53.8, 5201.0], [53.9, 5206.0], [54.0, 5206.0], [54.1, 5212.0], [54.2, 5212.0], [54.3, 5231.0], [54.4, 5231.0], [54.5, 5239.0], [54.6, 5239.0], [54.7, 5243.0], [54.8, 5243.0], [54.9, 5245.0], [55.0, 5245.0], [55.1, 5247.0], [55.2, 5247.0], [55.3, 5250.0], [55.4, 5250.0], [55.5, 5254.0], [55.6, 5254.0], [55.7, 5258.0], [55.8, 5258.0], [55.9, 5259.0], [56.0, 5259.0], [56.1, 5261.0], [56.2, 5261.0], [56.3, 5266.0], [56.4, 5266.0], [56.5, 5273.0], [56.6, 5273.0], [56.7, 5279.0], [56.8, 5279.0], [56.9, 5289.0], [57.0, 5289.0], [57.1, 5292.0], [57.2, 5292.0], [57.3, 5296.0], [57.4, 5296.0], [57.5, 5310.0], [57.6, 5310.0], [57.7, 5311.0], [57.8, 5311.0], [57.9, 5312.0], [58.0, 5312.0], [58.1, 5315.0], [58.2, 5315.0], [58.3, 5329.0], [58.4, 5329.0], [58.5, 5333.0], [58.6, 5333.0], [58.7, 5334.0], [58.8, 5334.0], [58.9, 5337.0], [59.0, 5337.0], [59.1, 5337.0], [59.2, 5337.0], [59.3, 5337.0], [59.4, 5337.0], [59.5, 5338.0], [59.6, 5338.0], [59.7, 5340.0], [59.8, 5340.0], [59.9, 5353.0], [60.0, 5353.0], [60.1, 5361.0], [60.2, 5361.0], [60.3, 5365.0], [60.4, 5365.0], [60.5, 5370.0], [60.6, 5370.0], [60.7, 5376.0], [60.8, 5376.0], [60.9, 5379.0], [61.0, 5379.0], [61.1, 5382.0], [61.2, 5382.0], [61.3, 5383.0], [61.4, 5383.0], [61.5, 5384.0], [61.6, 5384.0], [61.7, 5397.0], [61.8, 5397.0], [61.9, 5398.0], [62.0, 5398.0], [62.1, 5404.0], [62.2, 5404.0], [62.3, 5418.0], [62.4, 5418.0], [62.5, 5418.0], [62.6, 5418.0], [62.7, 5423.0], [62.8, 5423.0], [62.9, 5425.0], [63.0, 5425.0], [63.1, 5427.0], [63.2, 5427.0], [63.3, 5428.0], [63.4, 5428.0], [63.5, 5431.0], [63.6, 5431.0], [63.7, 5433.0], [63.8, 5433.0], [63.9, 5435.0], [64.0, 5435.0], [64.1, 5443.0], [64.2, 5443.0], [64.3, 5444.0], [64.4, 5444.0], [64.5, 5452.0], [64.6, 5452.0], [64.7, 5452.0], [64.8, 5452.0], [64.9, 5454.0], [65.0, 5454.0], [65.1, 5455.0], [65.2, 5455.0], [65.3, 5457.0], [65.4, 5457.0], [65.5, 5459.0], [65.6, 5459.0], [65.7, 5462.0], [65.8, 5462.0], [65.9, 5466.0], [66.0, 5466.0], [66.1, 5466.0], [66.2, 5466.0], [66.3, 5469.0], [66.4, 5469.0], [66.5, 5470.0], [66.6, 5470.0], [66.7, 5475.0], [66.8, 5475.0], [66.9, 5478.0], [67.0, 5478.0], [67.1, 5479.0], [67.2, 5479.0], [67.3, 5491.0], [67.4, 5491.0], [67.5, 5493.0], [67.6, 5493.0], [67.7, 5497.0], [67.8, 5497.0], [67.9, 5502.0], [68.0, 5502.0], [68.1, 5508.0], [68.2, 5508.0], [68.3, 5510.0], [68.4, 5510.0], [68.5, 5510.0], [68.6, 5510.0], [68.7, 5511.0], [68.8, 5511.0], [68.9, 5512.0], [69.0, 5512.0], [69.1, 5515.0], [69.2, 5515.0], [69.3, 5516.0], [69.4, 5516.0], [69.5, 5517.0], [69.6, 5517.0], [69.7, 5519.0], [69.8, 5519.0], [69.9, 5520.0], [70.0, 5520.0], [70.1, 5537.0], [70.2, 5537.0], [70.3, 5543.0], [70.4, 5543.0], [70.5, 5545.0], [70.6, 5545.0], [70.7, 5549.0], [70.8, 5549.0], [70.9, 5552.0], [71.0, 5552.0], [71.1, 5554.0], [71.2, 5554.0], [71.3, 5562.0], [71.4, 5562.0], [71.5, 5563.0], [71.6, 5563.0], [71.7, 5569.0], [71.8, 5569.0], [71.9, 5575.0], [72.0, 5575.0], [72.1, 5578.0], [72.2, 5578.0], [72.3, 5587.0], [72.4, 5587.0], [72.5, 5592.0], [72.6, 5592.0], [72.7, 5593.0], [72.8, 5593.0], [72.9, 5608.0], [73.0, 5608.0], [73.1, 5608.0], [73.2, 5608.0], [73.3, 5608.0], [73.4, 5608.0], [73.5, 5615.0], [73.6, 5615.0], [73.7, 5622.0], [73.8, 5622.0], [73.9, 5632.0], [74.0, 5632.0], [74.1, 5635.0], [74.2, 5635.0], [74.3, 5646.0], [74.4, 5646.0], [74.5, 5656.0], [74.6, 5656.0], [74.7, 5668.0], [74.8, 5668.0], [74.9, 5689.0], [75.0, 5689.0], [75.1, 5689.0], [75.2, 5689.0], [75.3, 5706.0], [75.4, 5706.0], [75.5, 5711.0], [75.6, 5711.0], [75.7, 5711.0], [75.8, 5711.0], [75.9, 5727.0], [76.0, 5727.0], [76.1, 5735.0], [76.2, 5735.0], [76.3, 5748.0], [76.4, 5748.0], [76.5, 5759.0], [76.6, 5759.0], [76.7, 5762.0], [76.8, 5762.0], [76.9, 5763.0], [77.0, 5763.0], [77.1, 5773.0], [77.2, 5773.0], [77.3, 5778.0], [77.4, 5778.0], [77.5, 5782.0], [77.6, 5782.0], [77.7, 5783.0], [77.8, 5783.0], [77.9, 5798.0], [78.0, 5798.0], [78.1, 5804.0], [78.2, 5804.0], [78.3, 5821.0], [78.4, 5821.0], [78.5, 5823.0], [78.6, 5823.0], [78.7, 5824.0], [78.8, 5824.0], [78.9, 5830.0], [79.0, 5830.0], [79.1, 5841.0], [79.2, 5841.0], [79.3, 5867.0], [79.4, 5867.0], [79.5, 5875.0], [79.6, 5875.0], [79.7, 5882.0], [79.8, 5882.0], [79.9, 5884.0], [80.0, 5884.0], [80.1, 5891.0], [80.2, 5891.0], [80.3, 5895.0], [80.4, 5895.0], [80.5, 5910.0], [80.6, 5910.0], [80.7, 5915.0], [80.8, 5915.0], [80.9, 5920.0], [81.0, 5920.0], [81.1, 5921.0], [81.2, 5921.0], [81.3, 5922.0], [81.4, 5922.0], [81.5, 5925.0], [81.6, 5925.0], [81.7, 5928.0], [81.8, 5928.0], [81.9, 5933.0], [82.0, 5933.0], [82.1, 5934.0], [82.2, 5934.0], [82.3, 5951.0], [82.4, 5951.0], [82.5, 5951.0], [82.6, 5951.0], [82.7, 5952.0], [82.8, 5952.0], [82.9, 5954.0], [83.0, 5954.0], [83.1, 5956.0], [83.2, 5956.0], [83.3, 5959.0], [83.4, 5959.0], [83.5, 5964.0], [83.6, 5964.0], [83.7, 5966.0], [83.8, 5966.0], [83.9, 5968.0], [84.0, 5968.0], [84.1, 5970.0], [84.2, 5970.0], [84.3, 5976.0], [84.4, 5976.0], [84.5, 5977.0], [84.6, 5977.0], [84.7, 5979.0], [84.8, 5979.0], [84.9, 5980.0], [85.0, 5980.0], [85.1, 5980.0], [85.2, 5980.0], [85.3, 5982.0], [85.4, 5982.0], [85.5, 5985.0], [85.6, 5985.0], [85.7, 5986.0], [85.8, 5986.0], [85.9, 5996.0], [86.0, 5996.0], [86.1, 5997.0], [86.2, 5997.0], [86.3, 5999.0], [86.4, 5999.0], [86.5, 6012.0], [86.6, 6012.0], [86.7, 6014.0], [86.8, 6014.0], [86.9, 6041.0], [87.0, 6041.0], [87.1, 6051.0], [87.2, 6051.0], [87.3, 6055.0], [87.4, 6055.0], [87.5, 6078.0], [87.6, 6078.0], [87.7, 6080.0], [87.8, 6080.0], [87.9, 6082.0], [88.0, 6082.0], [88.1, 6143.0], [88.2, 6143.0], [88.3, 6150.0], [88.4, 6150.0], [88.5, 6168.0], [88.6, 6168.0], [88.7, 6174.0], [88.8, 6174.0], [88.9, 6177.0], [89.0, 6177.0], [89.1, 6186.0], [89.2, 6186.0], [89.3, 6186.0], [89.4, 6186.0], [89.5, 6187.0], [89.6, 6187.0], [89.7, 6190.0], [89.8, 6190.0], [89.9, 6192.0], [90.0, 6192.0], [90.1, 6192.0], [90.2, 6192.0], [90.3, 6195.0], [90.4, 6195.0], [90.5, 6199.0], [90.6, 6199.0], [90.7, 6201.0], [90.8, 6201.0], [90.9, 6203.0], [91.0, 6203.0], [91.1, 6206.0], [91.2, 6206.0], [91.3, 6206.0], [91.4, 6206.0], [91.5, 6208.0], [91.6, 6208.0], [91.7, 6210.0], [91.8, 6210.0], [91.9, 6215.0], [92.0, 6215.0], [92.1, 6215.0], [92.2, 6215.0], [92.3, 6228.0], [92.4, 6228.0], [92.5, 6228.0], [92.6, 6228.0], [92.7, 6239.0], [92.8, 6239.0], [92.9, 6241.0], [93.0, 6241.0], [93.1, 6254.0], [93.2, 6254.0], [93.3, 6266.0], [93.4, 6266.0], [93.5, 6275.0], [93.6, 6275.0], [93.7, 6275.0], [93.8, 6275.0], [93.9, 6285.0], [94.0, 6285.0], [94.1, 6301.0], [94.2, 6301.0], [94.3, 6304.0], [94.4, 6304.0], [94.5, 6309.0], [94.6, 6309.0], [94.7, 6320.0], [94.8, 6320.0], [94.9, 6321.0], [95.0, 6321.0], [95.1, 6325.0], [95.2, 6325.0], [95.3, 6337.0], [95.4, 6337.0], [95.5, 6337.0], [95.6, 6337.0], [95.7, 6346.0], [95.8, 6346.0], [95.9, 6366.0], [96.0, 6366.0], [96.1, 6373.0], [96.2, 6373.0], [96.3, 6376.0], [96.4, 6376.0], [96.5, 6383.0], [96.6, 6383.0], [96.7, 6396.0], [96.8, 6396.0], [96.9, 6401.0], [97.0, 6401.0], [97.1, 6454.0], [97.2, 6454.0], [97.3, 6459.0], [97.4, 6459.0], [97.5, 6610.0], [97.6, 6610.0], [97.7, 6641.0], [97.8, 6641.0], [97.9, 6674.0], [98.0, 6674.0], [98.1, 6675.0], [98.2, 6675.0], [98.3, 6687.0], [98.4, 6687.0], [98.5, 6703.0], [98.6, 6703.0], [98.7, 6705.0], [98.8, 6705.0], [98.9, 6754.0], [99.0, 6754.0], [99.1, 6762.0], [99.2, 6762.0], [99.3, 6785.0], [99.4, 6785.0], [99.5, 6789.0], [99.6, 6789.0], [99.7, 6819.0], [99.8, 6819.0], [99.9, 6826.0], [100.0, 6826.0]], "isOverall": false, "label": "Get User Info", "isController": false}, {"data": [[0.0, 307.0], [0.1, 307.0], [0.2, 323.0], [0.3, 323.0], [0.4, 325.0], [0.5, 325.0], [0.6, 325.0], [0.7, 338.0], [0.8, 341.0], [0.9, 341.0], [1.0, 342.0], [1.1, 342.0], [1.2, 353.0], [1.3, 353.0], [1.4, 353.0], [1.5, 353.0], [1.6, 353.0], [1.7, 353.0], [1.8, 358.0], [1.9, 358.0], [2.0, 360.0], [2.1, 360.0], [2.2, 361.0], [2.3, 361.0], [2.4, 376.0], [2.5, 376.0], [2.6, 381.0], [2.7, 381.0], [2.8, 381.0], [2.9, 400.0], [3.0, 400.0], [3.1, 428.0], [3.2, 428.0], [3.3, 429.0], [3.4, 429.0], [3.5, 442.0], [3.6, 442.0], [3.7, 452.0], [3.8, 452.0], [3.9, 455.0], [4.0, 455.0], [4.1, 456.0], [4.2, 456.0], [4.3, 461.0], [4.4, 461.0], [4.5, 462.0], [4.6, 462.0], [4.7, 463.0], [4.8, 463.0], [4.9, 464.0], [5.0, 464.0], [5.1, 464.0], [5.2, 464.0], [5.3, 466.0], [5.4, 466.0], [5.5, 467.0], [5.6, 467.0], [5.7, 470.0], [5.8, 470.0], [5.9, 470.0], [6.0, 470.0], [6.1, 471.0], [6.2, 471.0], [6.3, 471.0], [6.4, 471.0], [6.5, 471.0], [6.6, 471.0], [6.7, 472.0], [6.8, 472.0], [6.9, 477.0], [7.0, 477.0], [7.1, 481.0], [7.2, 481.0], [7.3, 482.0], [7.4, 482.0], [7.5, 482.0], [7.6, 482.0], [7.7, 483.0], [7.8, 483.0], [7.9, 488.0], [8.0, 488.0], [8.1, 490.0], [8.2, 490.0], [8.3, 491.0], [8.4, 491.0], [8.5, 491.0], [8.6, 491.0], [8.7, 499.0], [8.8, 499.0], [8.9, 499.0], [9.0, 499.0], [9.1, 512.0], [9.2, 512.0], [9.3, 512.0], [9.4, 512.0], [9.5, 515.0], [9.6, 515.0], [9.7, 517.0], [9.8, 517.0], [9.9, 518.0], [10.0, 518.0], [10.1, 522.0], [10.2, 522.0], [10.3, 523.0], [10.4, 523.0], [10.5, 523.0], [10.6, 523.0], [10.7, 526.0], [10.8, 531.0], [10.9, 531.0], [11.0, 533.0], [11.1, 533.0], [11.2, 535.0], [11.3, 535.0], [11.4, 538.0], [11.5, 538.0], [11.6, 538.0], [11.7, 538.0], [11.8, 539.0], [11.9, 539.0], [12.0, 539.0], [12.1, 539.0], [12.2, 540.0], [12.3, 540.0], [12.4, 540.0], [12.5, 540.0], [12.6, 540.0], [12.7, 540.0], [12.8, 542.0], [12.9, 542.0], [13.0, 545.0], [13.1, 545.0], [13.2, 545.0], [13.3, 545.0], [13.4, 546.0], [13.5, 546.0], [13.6, 546.0], [13.7, 546.0], [13.8, 547.0], [13.9, 547.0], [14.0, 548.0], [14.1, 548.0], [14.2, 548.0], [14.3, 548.0], [14.4, 549.0], [14.5, 549.0], [14.6, 549.0], [14.7, 549.0], [14.8, 549.0], [14.9, 549.0], [15.0, 550.0], [15.1, 550.0], [15.2, 552.0], [15.3, 552.0], [15.4, 552.0], [15.5, 552.0], [15.6, 552.0], [15.7, 552.0], [15.8, 553.0], [15.9, 553.0], [16.0, 554.0], [16.1, 554.0], [16.2, 554.0], [16.3, 554.0], [16.4, 556.0], [16.5, 556.0], [16.6, 556.0], [16.7, 556.0], [16.8, 560.0], [16.9, 560.0], [17.0, 560.0], [17.1, 560.0], [17.2, 561.0], [17.3, 561.0], [17.4, 562.0], [17.5, 562.0], [17.6, 563.0], [17.7, 563.0], [17.8, 563.0], [17.9, 563.0], [18.0, 564.0], [18.1, 564.0], [18.2, 565.0], [18.3, 565.0], [18.4, 568.0], [18.5, 568.0], [18.6, 568.0], [18.7, 568.0], [18.8, 570.0], [18.9, 570.0], [19.0, 572.0], [19.1, 572.0], [19.2, 573.0], [19.3, 573.0], [19.4, 573.0], [19.5, 573.0], [19.6, 574.0], [19.7, 574.0], [19.8, 574.0], [19.9, 574.0], [20.0, 575.0], [20.1, 575.0], [20.2, 576.0], [20.3, 576.0], [20.4, 577.0], [20.5, 577.0], [20.6, 578.0], [20.7, 578.0], [20.8, 580.0], [20.9, 580.0], [21.0, 580.0], [21.1, 580.0], [21.2, 582.0], [21.3, 582.0], [21.4, 585.0], [21.5, 585.0], [21.6, 586.0], [21.7, 586.0], [21.8, 586.0], [21.9, 586.0], [22.0, 587.0], [22.1, 587.0], [22.2, 588.0], [22.3, 588.0], [22.4, 589.0], [22.5, 589.0], [22.6, 590.0], [22.7, 590.0], [22.8, 591.0], [22.9, 591.0], [23.0, 592.0], [23.1, 592.0], [23.2, 592.0], [23.3, 592.0], [23.4, 594.0], [23.5, 594.0], [23.6, 594.0], [23.7, 594.0], [23.8, 594.0], [23.9, 594.0], [24.0, 595.0], [24.1, 595.0], [24.2, 596.0], [24.3, 596.0], [24.4, 597.0], [24.5, 597.0], [24.6, 598.0], [24.7, 598.0], [24.8, 599.0], [24.9, 599.0], [25.0, 602.0], [25.1, 602.0], [25.2, 603.0], [25.3, 603.0], [25.4, 603.0], [25.5, 603.0], [25.6, 607.0], [25.7, 607.0], [25.8, 611.0], [25.9, 611.0], [26.0, 612.0], [26.1, 612.0], [26.2, 614.0], [26.3, 614.0], [26.4, 618.0], [26.5, 618.0], [26.6, 621.0], [26.7, 621.0], [26.8, 624.0], [26.9, 624.0], [27.0, 624.0], [27.1, 624.0], [27.2, 626.0], [27.3, 626.0], [27.4, 626.0], [27.5, 626.0], [27.6, 627.0], [27.7, 627.0], [27.8, 628.0], [27.9, 628.0], [28.0, 629.0], [28.1, 629.0], [28.2, 630.0], [28.3, 630.0], [28.4, 630.0], [28.5, 630.0], [28.6, 630.0], [28.7, 630.0], [28.8, 632.0], [28.9, 632.0], [29.0, 633.0], [29.1, 633.0], [29.2, 633.0], [29.3, 633.0], [29.4, 635.0], [29.5, 635.0], [29.6, 635.0], [29.7, 635.0], [29.8, 637.0], [29.9, 637.0], [30.0, 639.0], [30.1, 639.0], [30.2, 639.0], [30.3, 639.0], [30.4, 640.0], [30.5, 640.0], [30.6, 640.0], [30.7, 640.0], [30.8, 644.0], [30.9, 644.0], [31.0, 645.0], [31.1, 645.0], [31.2, 646.0], [31.3, 646.0], [31.4, 646.0], [31.5, 646.0], [31.6, 647.0], [31.7, 647.0], [31.8, 649.0], [31.9, 649.0], [32.0, 649.0], [32.1, 649.0], [32.2, 649.0], [32.3, 649.0], [32.4, 650.0], [32.5, 650.0], [32.6, 650.0], [32.7, 650.0], [32.8, 655.0], [32.9, 655.0], [33.0, 656.0], [33.1, 656.0], [33.2, 658.0], [33.3, 658.0], [33.4, 658.0], [33.5, 658.0], [33.6, 658.0], [33.7, 658.0], [33.8, 659.0], [33.9, 659.0], [34.0, 663.0], [34.1, 663.0], [34.2, 665.0], [34.3, 665.0], [34.4, 668.0], [34.5, 668.0], [34.6, 670.0], [34.7, 670.0], [34.8, 670.0], [34.9, 670.0], [35.0, 672.0], [35.1, 672.0], [35.2, 673.0], [35.3, 673.0], [35.4, 674.0], [35.5, 674.0], [35.6, 675.0], [35.7, 675.0], [35.8, 677.0], [35.9, 677.0], [36.0, 677.0], [36.1, 677.0], [36.2, 678.0], [36.3, 678.0], [36.4, 678.0], [36.5, 678.0], [36.6, 680.0], [36.7, 680.0], [36.8, 681.0], [36.9, 681.0], [37.0, 683.0], [37.1, 683.0], [37.2, 686.0], [37.3, 686.0], [37.4, 687.0], [37.5, 687.0], [37.6, 687.0], [37.7, 687.0], [37.8, 688.0], [37.9, 688.0], [38.0, 688.0], [38.1, 688.0], [38.2, 689.0], [38.3, 689.0], [38.4, 692.0], [38.5, 692.0], [38.6, 696.0], [38.7, 696.0], [38.8, 696.0], [38.9, 696.0], [39.0, 698.0], [39.1, 698.0], [39.2, 698.0], [39.3, 698.0], [39.4, 698.0], [39.5, 698.0], [39.6, 699.0], [39.7, 699.0], [39.8, 700.0], [39.9, 700.0], [40.0, 700.0], [40.1, 700.0], [40.2, 700.0], [40.3, 700.0], [40.4, 700.0], [40.5, 700.0], [40.6, 700.0], [40.7, 700.0], [40.8, 701.0], [40.9, 701.0], [41.0, 702.0], [41.1, 702.0], [41.2, 703.0], [41.3, 703.0], [41.4, 704.0], [41.5, 704.0], [41.6, 706.0], [41.7, 706.0], [41.8, 706.0], [41.9, 707.0], [42.0, 707.0], [42.1, 707.0], [42.2, 709.0], [42.3, 709.0], [42.4, 709.0], [42.5, 709.0], [42.6, 710.0], [42.7, 710.0], [42.8, 710.0], [42.9, 710.0], [43.0, 713.0], [43.1, 713.0], [43.2, 714.0], [43.3, 714.0], [43.4, 714.0], [43.5, 717.0], [43.6, 717.0], [43.7, 717.0], [43.8, 717.0], [43.9, 720.0], [44.0, 720.0], [44.1, 720.0], [44.2, 721.0], [44.3, 721.0], [44.4, 721.0], [44.5, 723.0], [44.6, 723.0], [44.7, 724.0], [44.8, 724.0], [44.9, 726.0], [45.0, 726.0], [45.1, 727.0], [45.2, 727.0], [45.3, 727.0], [45.4, 727.0], [45.5, 728.0], [45.6, 728.0], [45.7, 729.0], [45.8, 729.0], [45.9, 729.0], [46.0, 729.0], [46.1, 731.0], [46.2, 731.0], [46.3, 731.0], [46.4, 731.0], [46.5, 734.0], [46.6, 734.0], [46.7, 735.0], [46.8, 735.0], [46.9, 736.0], [47.0, 736.0], [47.1, 737.0], [47.2, 737.0], [47.3, 739.0], [47.4, 739.0], [47.5, 742.0], [47.6, 742.0], [47.7, 744.0], [47.8, 744.0], [47.9, 749.0], [48.0, 749.0], [48.1, 752.0], [48.2, 752.0], [48.3, 752.0], [48.4, 752.0], [48.5, 760.0], [48.6, 760.0], [48.7, 764.0], [48.8, 764.0], [48.9, 768.0], [49.0, 768.0], [49.1, 769.0], [49.2, 769.0], [49.3, 776.0], [49.4, 776.0], [49.5, 780.0], [49.6, 780.0], [49.7, 781.0], [49.8, 781.0], [49.9, 781.0], [50.0, 781.0], [50.1, 797.0], [50.2, 797.0], [50.3, 808.0], [50.4, 808.0], [50.5, 810.0], [50.6, 810.0], [50.7, 818.0], [50.8, 818.0], [50.9, 819.0], [51.0, 819.0], [51.1, 824.0], [51.2, 824.0], [51.3, 827.0], [51.4, 827.0], [51.5, 833.0], [51.6, 833.0], [51.7, 838.0], [51.8, 838.0], [51.9, 843.0], [52.0, 843.0], [52.1, 845.0], [52.2, 845.0], [52.3, 851.0], [52.4, 851.0], [52.5, 853.0], [52.6, 853.0], [52.7, 853.0], [52.8, 853.0], [52.9, 856.0], [53.0, 856.0], [53.1, 856.0], [53.2, 856.0], [53.3, 858.0], [53.4, 858.0], [53.5, 862.0], [53.6, 862.0], [53.7, 866.0], [53.8, 866.0], [53.9, 868.0], [54.0, 868.0], [54.1, 872.0], [54.2, 872.0], [54.3, 872.0], [54.4, 872.0], [54.5, 879.0], [54.6, 879.0], [54.7, 898.0], [54.8, 898.0], [54.9, 899.0], [55.0, 899.0], [55.1, 903.0], [55.2, 903.0], [55.3, 904.0], [55.4, 904.0], [55.5, 930.0], [55.6, 930.0], [55.7, 930.0], [55.8, 930.0], [55.9, 944.0], [56.0, 944.0], [56.1, 948.0], [56.2, 948.0], [56.3, 959.0], [56.4, 959.0], [56.5, 969.0], [56.6, 969.0], [56.7, 969.0], [56.8, 969.0], [56.9, 970.0], [57.0, 970.0], [57.1, 977.0], [57.2, 977.0], [57.3, 978.0], [57.4, 978.0], [57.5, 979.0], [57.6, 979.0], [57.7, 982.0], [57.8, 982.0], [57.9, 983.0], [58.0, 983.0], [58.1, 985.0], [58.2, 985.0], [58.3, 986.0], [58.4, 986.0], [58.5, 986.0], [58.6, 986.0], [58.7, 986.0], [58.8, 986.0], [58.9, 987.0], [59.0, 987.0], [59.1, 987.0], [59.2, 987.0], [59.3, 995.0], [59.4, 995.0], [59.5, 999.0], [59.6, 999.0], [59.7, 1004.0], [59.8, 1004.0], [59.9, 1009.0], [60.0, 1009.0], [60.1, 1012.0], [60.2, 1012.0], [60.3, 1014.0], [60.4, 1014.0], [60.5, 1015.0], [60.6, 1015.0], [60.7, 1017.0], [60.8, 1017.0], [60.9, 1019.0], [61.0, 1019.0], [61.1, 1021.0], [61.2, 1021.0], [61.3, 1021.0], [61.4, 1021.0], [61.5, 1022.0], [61.6, 1022.0], [61.7, 1027.0], [61.8, 1027.0], [61.9, 1035.0], [62.0, 1035.0], [62.1, 1037.0], [62.2, 1037.0], [62.3, 1038.0], [62.4, 1038.0], [62.5, 1041.0], [62.6, 1041.0], [62.7, 1043.0], [62.8, 1043.0], [62.9, 1045.0], [63.0, 1045.0], [63.1, 1046.0], [63.2, 1046.0], [63.3, 1046.0], [63.4, 1046.0], [63.5, 1050.0], [63.6, 1050.0], [63.7, 1052.0], [63.8, 1052.0], [63.9, 1053.0], [64.0, 1053.0], [64.1, 1055.0], [64.2, 1055.0], [64.3, 1059.0], [64.4, 1059.0], [64.5, 1061.0], [64.6, 1061.0], [64.7, 1064.0], [64.8, 1064.0], [64.9, 1068.0], [65.0, 1068.0], [65.1, 1073.0], [65.2, 1073.0], [65.3, 1079.0], [65.4, 1079.0], [65.5, 1085.0], [65.6, 1085.0], [65.7, 1085.0], [65.8, 1085.0], [65.9, 1088.0], [66.0, 1088.0], [66.1, 1094.0], [66.2, 1094.0], [66.3, 1095.0], [66.4, 1095.0], [66.5, 1097.0], [66.6, 1097.0], [66.7, 1100.0], [66.8, 1100.0], [66.9, 1101.0], [67.0, 1101.0], [67.1, 1110.0], [67.2, 1110.0], [67.3, 1116.0], [67.4, 1116.0], [67.5, 1119.0], [67.6, 1119.0], [67.7, 1126.0], [67.8, 1126.0], [67.9, 1136.0], [68.0, 1136.0], [68.1, 1144.0], [68.2, 1144.0], [68.3, 1150.0], [68.4, 1150.0], [68.5, 1150.0], [68.6, 1150.0], [68.7, 1150.0], [68.8, 1150.0], [68.9, 1153.0], [69.0, 1153.0], [69.1, 1154.0], [69.2, 1154.0], [69.3, 1163.0], [69.4, 1163.0], [69.5, 1169.0], [69.6, 1169.0], [69.7, 1169.0], [69.8, 1169.0], [69.9, 1171.0], [70.0, 1171.0], [70.1, 1174.0], [70.2, 1174.0], [70.3, 1196.0], [70.4, 1196.0], [70.5, 1202.0], [70.6, 1202.0], [70.7, 1204.0], [70.8, 1204.0], [70.9, 1209.0], [71.0, 1209.0], [71.1, 1215.0], [71.2, 1215.0], [71.3, 1219.0], [71.4, 1219.0], [71.5, 1219.0], [71.6, 1219.0], [71.7, 1224.0], [71.8, 1224.0], [71.9, 1226.0], [72.0, 1226.0], [72.1, 1229.0], [72.2, 1229.0], [72.3, 1234.0], [72.4, 1234.0], [72.5, 1236.0], [72.6, 1236.0], [72.7, 1236.0], [72.8, 1236.0], [72.9, 1241.0], [73.0, 1241.0], [73.1, 1244.0], [73.2, 1244.0], [73.3, 1247.0], [73.4, 1247.0], [73.5, 1248.0], [73.6, 1248.0], [73.7, 1250.0], [73.8, 1250.0], [73.9, 1254.0], [74.0, 1254.0], [74.1, 1254.0], [74.2, 1254.0], [74.3, 1257.0], [74.4, 1257.0], [74.5, 1258.0], [74.6, 1258.0], [74.7, 1264.0], [74.8, 1264.0], [74.9, 1284.0], [75.0, 1284.0], [75.1, 1284.0], [75.2, 1284.0], [75.3, 1312.0], [75.4, 1312.0], [75.5, 1317.0], [75.6, 1317.0], [75.7, 1321.0], [75.8, 1321.0], [75.9, 1323.0], [76.0, 1323.0], [76.1, 1325.0], [76.2, 1325.0], [76.3, 1326.0], [76.4, 1326.0], [76.5, 1326.0], [76.6, 1326.0], [76.7, 1326.0], [76.8, 1326.0], [76.9, 1331.0], [77.0, 1331.0], [77.1, 1333.0], [77.2, 1333.0], [77.3, 1336.0], [77.4, 1336.0], [77.5, 1342.0], [77.6, 1342.0], [77.7, 1344.0], [77.8, 1344.0], [77.9, 1346.0], [78.0, 1346.0], [78.1, 1347.0], [78.2, 1347.0], [78.3, 1365.0], [78.4, 1365.0], [78.5, 1366.0], [78.6, 1366.0], [78.7, 1373.0], [78.8, 1373.0], [78.9, 1384.0], [79.0, 1384.0], [79.1, 1386.0], [79.2, 1386.0], [79.3, 1389.0], [79.4, 1389.0], [79.5, 1390.0], [79.6, 1390.0], [79.7, 1390.0], [79.8, 1390.0], [79.9, 1394.0], [80.0, 1394.0], [80.1, 1397.0], [80.2, 1397.0], [80.3, 1408.0], [80.4, 1408.0], [80.5, 1408.0], [80.6, 1408.0], [80.7, 1414.0], [80.8, 1414.0], [80.9, 1420.0], [81.0, 1420.0], [81.1, 1420.0], [81.2, 1420.0], [81.3, 1423.0], [81.4, 1423.0], [81.5, 1426.0], [81.6, 1426.0], [81.7, 1431.0], [81.8, 1431.0], [81.9, 1434.0], [82.0, 1434.0], [82.1, 1441.0], [82.2, 1441.0], [82.3, 1445.0], [82.4, 1445.0], [82.5, 1447.0], [82.6, 1447.0], [82.7, 1454.0], [82.8, 1454.0], [82.9, 1460.0], [83.0, 1460.0], [83.1, 1462.0], [83.2, 1462.0], [83.3, 1466.0], [83.4, 1466.0], [83.5, 1466.0], [83.6, 1466.0], [83.7, 1469.0], [83.8, 1469.0], [83.9, 1478.0], [84.0, 1478.0], [84.1, 1489.0], [84.2, 1489.0], [84.3, 1496.0], [84.4, 1496.0], [84.5, 1499.0], [84.6, 1499.0], [84.7, 1499.0], [84.8, 1499.0], [84.9, 1505.0], [85.0, 1505.0], [85.1, 1509.0], [85.2, 1509.0], [85.3, 1523.0], [85.4, 1523.0], [85.5, 1524.0], [85.6, 1524.0], [85.7, 1532.0], [85.8, 1532.0], [85.9, 1533.0], [86.0, 1533.0], [86.1, 1545.0], [86.2, 1545.0], [86.3, 1548.0], [86.4, 1548.0], [86.5, 1559.0], [86.6, 1559.0], [86.7, 1563.0], [86.8, 1563.0], [86.9, 1563.0], [87.0, 1563.0], [87.1, 1581.0], [87.2, 1581.0], [87.3, 1600.0], [87.4, 1600.0], [87.5, 1684.0], [87.6, 1684.0], [87.7, 1693.0], [87.8, 1693.0], [87.9, 1707.0], [88.0, 1707.0], [88.1, 1729.0], [88.2, 1729.0], [88.3, 1729.0], [88.4, 1729.0], [88.5, 1730.0], [88.6, 1730.0], [88.7, 1755.0], [88.8, 1755.0], [88.9, 1759.0], [89.0, 1759.0], [89.1, 1782.0], [89.2, 1782.0], [89.3, 1784.0], [89.4, 1784.0], [89.5, 1786.0], [89.6, 1786.0], [89.7, 1801.0], [89.8, 1801.0], [89.9, 1814.0], [90.0, 1814.0], [90.1, 1815.0], [90.2, 1815.0], [90.3, 1861.0], [90.4, 1861.0], [90.5, 1882.0], [90.6, 1882.0], [90.7, 1917.0], [90.8, 1917.0], [90.9, 1944.0], [91.0, 1944.0], [91.1, 1965.0], [91.2, 1965.0], [91.3, 1967.0], [91.4, 1967.0], [91.5, 1967.0], [91.6, 1967.0], [91.7, 1978.0], [91.8, 1978.0], [91.9, 1992.0], [92.0, 1992.0], [92.1, 1998.0], [92.2, 1998.0], [92.3, 2005.0], [92.4, 2005.0], [92.5, 2042.0], [92.6, 2042.0], [92.7, 2061.0], [92.8, 2061.0], [92.9, 2065.0], [93.0, 2065.0], [93.1, 2070.0], [93.2, 2070.0], [93.3, 2071.0], [93.4, 2071.0], [93.5, 2074.0], [93.6, 2074.0], [93.7, 2077.0], [93.8, 2077.0], [93.9, 2084.0], [94.0, 2084.0], [94.1, 2085.0], [94.2, 2085.0], [94.3, 2114.0], [94.4, 2114.0], [94.5, 2115.0], [94.6, 2115.0], [94.7, 2116.0], [94.8, 2116.0], [94.9, 2126.0], [95.0, 2126.0], [95.1, 2132.0], [95.2, 2132.0], [95.3, 2134.0], [95.4, 2134.0], [95.5, 2166.0], [95.6, 2166.0], [95.7, 2166.0], [95.8, 2166.0], [95.9, 2196.0], [96.0, 2196.0], [96.1, 2199.0], [96.2, 2199.0], [96.3, 2224.0], [96.4, 2224.0], [96.5, 2226.0], [96.6, 2226.0], [96.7, 2255.0], [96.8, 2255.0], [96.9, 2265.0], [97.0, 2265.0], [97.1, 2271.0], [97.2, 2271.0], [97.3, 2285.0], [97.4, 2285.0], [97.5, 2290.0], [97.6, 2290.0], [97.7, 2290.0], [97.8, 2290.0], [97.9, 2296.0], [98.0, 2296.0], [98.1, 2328.0], [98.2, 2328.0], [98.3, 2334.0], [98.4, 2334.0], [98.5, 2342.0], [98.6, 2342.0], [98.7, 2378.0], [98.8, 2378.0], [98.9, 2387.0], [99.0, 2387.0], [99.1, 2395.0], [99.2, 2395.0], [99.3, 2451.0], [99.4, 2451.0], [99.5, 2500.0], [99.6, 2500.0], [99.7, 2510.0], [99.8, 2510.0], [99.9, 2524.0], [100.0, 2524.0]], "isOverall": false, "label": "Get Settings All", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 253.0, "series": [{"data": [[4500.0, 24.0], [2500.0, 11.0], [5000.0, 107.0], [5500.0, 93.0], [3000.0, 44.0], [1500.0, 2.0], [6000.0, 55.0], [6500.0, 13.0], [3500.0, 59.0], [2000.0, 10.0], [4000.0, 82.0]], "isOverall": false, "label": "Get User Info", "isController": false}, {"data": [[0.0, 45.0], [2500.0, 3.0], [1500.0, 37.0], [500.0, 253.0], [1000.0, 126.0], [2000.0, 36.0]], "isOverall": false, "label": "Get Settings All", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 6500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 576.0, "series": [{"data": [[1.0, 379.0]], "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[0.0, 45.0]], "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[2.0, 576.0]], "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 324.3209999999997, "minX": 1.51628766E12, "maxY": 324.3209999999997, "series": [{"data": [[1.51628766E12, 324.3209999999997]], "isOverall": false, "label": "Open App", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51628766E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 307.0, "minX": 1.0, "maxY": 6681.0, "series": [{"data": [[158.0, 5841.0], [165.0, 5956.0], [163.0, 6681.0], [199.0, 5568.5], [211.0, 5759.0], [231.0, 5517.0], [230.0, 6115.0], [229.0, 6198.5], [228.0, 6025.461538461538], [227.0, 6105.900000000001], [226.0, 5992.25], [225.0, 6208.0], [235.0, 5649.5], [234.0, 5899.0], [233.0, 6366.0], [232.0, 5632.0], [247.0, 5837.0], [244.0, 5698.333333333333], [242.0, 5951.0], [255.0, 6404.75], [253.0, 6325.0], [252.0, 5553.0], [250.0, 5921.0], [249.0, 5949.5], [271.0, 5365.0], [267.0, 6028.0], [266.0, 5671.333333333334], [264.0, 5757.333333333333], [262.0, 5911.5], [261.0, 5748.0], [259.0, 5563.0], [286.0, 6641.0], [284.0, 6266.0], [282.0, 5520.0], [281.0, 5940.75], [280.0, 5789.0], [278.0, 5422.0], [272.0, 5672.75], [303.0, 6241.0], [298.0, 5374.0], [297.0, 5497.0], [296.0, 5733.5], [293.0, 6254.0], [290.0, 5310.0], [289.0, 5515.0], [318.0, 5261.0], [317.0, 5749.333333333333], [315.0, 5975.666666666667], [314.0, 5455.0], [313.0, 5273.0], [308.0, 5848.5], [306.0, 5516.0], [304.0, 5858.666666666667], [334.0, 6206.0], [332.0, 6174.0], [331.0, 5418.0], [329.0, 5706.0], [328.0, 5662.25], [327.0, 5808.333333333333], [326.0, 5842.75], [322.0, 5837.333333333333], [321.0, 5452.0], [343.0, 5580.75], [341.0, 5615.857142857142], [340.0, 5758.5], [339.0, 5775.5], [365.0, 5176.0], [363.0, 6309.0], [356.0, 5928.0], [353.0, 5933.0], [352.0, 5239.5], [382.0, 5110.0], [381.0, 5395.5], [380.0, 5424.0], [376.0, 5604.5], [375.0, 4944.0], [372.0, 5503.75], [370.0, 5286.5], [369.0, 5920.0], [386.0, 6011.0], [398.0, 5093.0], [396.0, 5236.5], [395.0, 4828.0], [394.0, 5654.857142857143], [392.0, 5638.272727272726], [391.0, 6192.0], [390.0, 6215.0], [389.0, 6203.0], [385.0, 5830.0], [384.0, 5096.0], [409.0, 4849.0], [407.0, 5970.0], [402.0, 5959.0], [400.0, 4668.0], [431.0, 4306.0], [430.0, 4231.0], [429.0, 5032.5], [423.0, 4594.0], [446.0, 4612.0], [445.0, 4180.0], [443.0, 5112.0], [442.0, 5418.0], [441.0, 4795.5], [440.0, 4628.0], [437.0, 4623.5], [435.0, 5479.0], [463.0, 5150.0], [462.0, 3957.0], [460.0, 5204.0], [458.0, 5213.615384615385], [452.0, 5437.5], [478.0, 4057.4920634920636], [479.0, 3726.0], [477.0, 4251.714285714285], [474.0, 4198.0], [473.0, 4426.0], [472.0, 4400.5], [469.0, 4305.0], [465.0, 4596.166666666666], [464.0, 4851.166666666667], [494.0, 4036.25], [495.0, 3440.5], [493.0, 3621.0], [492.0, 3695.2], [491.0, 4251.0], [490.0, 3859.4], [489.0, 3904.0], [488.0, 3525.0], [483.0, 3870.0], [482.0, 3352.0], [481.0, 3637.3333333333335], [480.0, 3873.0], [500.0, 2992.183673469388], [499.0, 3703.6176470588234], [496.0, 3322.0]], "isOverall": false, "label": "Get User Info", "isController": false}, {"data": [[397.44200000000006, 4834.221999999999]], "isOverall": false, "label": "Get User Info-Aggregated", "isController": false}, {"data": [[2.0, 361.0], [3.0, 341.0], [4.0, 307.0], [5.0, 611.0], [6.0, 808.0], [7.0, 466.0], [8.0, 471.0], [9.0, 594.0], [10.0, 553.0], [11.0, 594.0], [12.0, 810.0], [13.0, 596.0], [14.0, 683.0], [15.0, 518.0], [16.0, 522.0], [17.0, 563.0], [18.0, 545.0], [19.0, 645.0], [20.0, 578.0], [21.0, 626.0], [22.0, 568.0], [23.0, 688.0], [24.0, 655.0], [25.0, 781.0], [26.0, 692.0], [27.0, 658.0], [28.0, 597.0], [29.0, 577.0], [30.0, 707.0], [31.0, 710.0], [33.0, 714.0], [32.0, 570.0], [35.0, 637.0], [34.0, 612.0], [37.0, 688.0], [36.0, 512.0], [39.0, 658.0], [38.0, 595.0], [41.0, 640.0], [40.0, 780.0], [43.0, 658.0], [42.0, 701.0], [45.0, 556.0], [44.0, 627.0], [47.0, 649.0], [46.0, 607.0], [49.0, 687.0], [48.0, 673.0], [51.0, 490.0], [50.0, 649.0], [53.0, 499.0], [52.0, 678.0], [55.0, 549.0], [54.0, 764.0], [57.0, 677.0], [56.0, 670.0], [59.0, 452.0], [58.0, 614.0], [61.0, 592.0], [60.0, 656.0], [63.0, 482.0], [62.0, 668.0], [67.0, 675.0], [66.0, 517.0], [65.0, 630.0], [64.0, 515.0], [71.0, 639.0], [70.0, 618.0], [69.0, 482.0], [68.0, 635.0], [75.0, 512.0], [74.0, 752.0], [73.0, 455.0], [72.0, 471.0], [79.0, 472.0], [78.0, 594.0], [77.0, 628.0], [76.0, 586.0], [83.0, 592.0], [82.0, 720.0], [81.0, 626.0], [80.0, 580.0], [87.0, 680.0], [86.0, 523.0], [85.0, 538.0], [84.0, 727.0], [91.0, 650.0], [90.0, 630.0], [89.0, 703.0], [88.0, 477.0], [95.0, 678.0], [94.0, 470.0], [93.0, 463.0], [92.0, 629.0], [99.0, 428.0], [98.0, 461.0], [97.0, 488.0], [96.0, 644.0], [103.0, 342.0], [102.0, 590.0], [101.0, 602.0], [100.0, 481.0], [107.0, 588.0], [106.0, 442.0], [105.0, 462.0], [104.0, 549.0], [111.0, 539.0], [110.0, 589.0], [109.0, 338.0], [108.0, 470.0], [115.0, 575.0], [114.0, 471.0], [113.0, 325.0], [112.0, 603.0], [119.0, 483.0], [118.0, 556.0], [117.0, 554.0], [116.0, 580.0], [123.0, 563.0], [122.0, 464.0], [121.0, 400.0], [120.0, 323.0], [127.0, 429.0], [126.0, 531.0], [125.0, 546.0], [124.0, 491.0], [135.0, 572.0], [134.0, 353.0], [133.0, 548.0], [132.0, 560.0], [131.0, 360.0], [130.0, 464.0], [129.0, 549.0], [128.0, 491.0], [143.0, 545.0], [142.0, 574.0], [141.0, 552.0], [140.0, 381.0], [139.0, 574.0], [138.0, 523.0], [137.0, 456.0], [136.0, 358.0], [151.0, 851.0], [150.0, 856.0], [149.0, 499.0], [148.0, 561.0], [147.0, 560.0], [146.0, 353.0], [145.0, 353.0], [144.0, 552.0], [159.0, 717.0], [158.0, 737.0], [157.0, 724.0], [156.0, 742.0], [155.0, 728.0], [154.0, 872.0], [153.0, 898.0], [152.0, 872.0], [167.0, 677.0], [166.0, 727.0], [165.0, 696.0], [164.0, 729.0], [163.0, 987.0], [162.0, 735.0], [161.0, 731.0], [160.0, 739.0], [175.0, 698.0], [174.0, 702.0], [173.0, 752.0], [172.0, 706.0], [171.0, 674.0], [170.0, 723.0], [169.0, 699.0], [168.0, 698.0], [183.0, 698.0], [182.0, 709.0], [181.0, 721.0], [180.0, 729.0], [179.0, 713.0], [178.0, 734.0], [177.0, 731.0], [176.0, 700.0], [191.0, 672.0], [190.0, 700.0], [189.0, 700.0], [188.0, 707.0], [187.0, 687.0], [186.0, 710.0], [185.0, 696.0], [184.0, 704.0], [199.0, 700.0], [198.0, 709.0], [197.0, 969.0], [196.0, 681.0], [195.0, 717.0], [194.0, 670.0], [193.0, 736.0], [192.0, 689.0], [207.0, 650.0], [206.0, 646.0], [205.0, 633.0], [204.0, 647.0], [203.0, 633.0], [202.0, 646.0], [201.0, 663.0], [200.0, 635.0], [215.0, 768.0], [214.0, 862.0], [213.0, 853.0], [212.0, 640.0], [211.0, 649.0], [210.0, 639.0], [209.0, 930.0], [208.0, 866.0], [223.0, 845.0], [222.0, 621.0], [221.0, 632.0], [220.0, 760.0], [219.0, 624.0], [218.0, 686.0], [217.0, 769.0], [216.0, 853.0], [231.0, 1944.0], [230.0, 1815.0], [229.0, 2510.0], [228.0, 2524.0], [227.0, 1861.0], [226.0, 818.0], [225.0, 879.0], [224.0, 868.0], [239.0, 1801.0], [238.0, 1684.0], [237.0, 1462.0], [236.0, 2265.0], [235.0, 1707.0], [234.0, 1600.0], [233.0, 1563.0], [232.0, 1563.0], [247.0, 1782.0], [246.0, 1394.0], [245.0, 1759.0], [244.0, 1786.0], [243.0, 1408.0], [242.0, 1917.0], [241.0, 2500.0], [240.0, 1426.0], [255.0, 2451.0], [254.0, 1729.0], [253.0, 2166.0], [252.0, 1447.0], [251.0, 1581.0], [250.0, 2226.0], [249.0, 1219.0], [248.0, 1454.0], [270.0, 1209.0], [271.0, 659.0], [269.0, 2199.0], [268.0, 1169.0], [267.0, 1533.0], [266.0, 781.0], [265.0, 1331.0], [264.0, 1882.0], [263.0, 1226.0], [257.0, 1326.0], [256.0, 1559.0], [259.0, 2196.0], [258.0, 2224.0], [262.0, 1408.0], [261.0, 1730.0], [260.0, 1532.0], [286.0, 630.0], [287.0, 1469.0], [285.0, 2115.0], [284.0, 2166.0], [283.0, 744.0], [282.0, 749.0], [281.0, 1333.0], [280.0, 2132.0], [279.0, 2114.0], [273.0, 2116.0], [272.0, 2134.0], [275.0, 1499.0], [274.0, 1126.0], [278.0, 1545.0], [277.0, 564.0], [276.0, 1390.0], [302.0, 1043.0], [303.0, 1094.0], [301.0, 720.0], [300.0, 1505.0], [299.0, 2387.0], [298.0, 726.0], [297.0, 1068.0], [296.0, 2395.0], [295.0, 540.0], [289.0, 1150.0], [288.0, 1390.0], [291.0, 1509.0], [290.0, 700.0], [294.0, 624.0], [293.0, 1466.0], [292.0, 542.0], [318.0, 1085.0], [319.0, 1088.0], [317.0, 1434.0], [316.0, 2342.0], [315.0, 603.0], [314.0, 1478.0], [313.0, 1100.0], [312.0, 2334.0], [311.0, 599.0], [305.0, 1431.0], [304.0, 1336.0], [307.0, 2378.0], [306.0, 598.0], [310.0, 2126.0], [309.0, 1095.0], [308.0, 1445.0], [334.0, 1052.0], [335.0, 1041.0], [333.0, 550.0], [332.0, 2071.0], [331.0, 1755.0], [330.0, 552.0], [329.0, 467.0], [328.0, 1064.0], [327.0, 979.0], [321.0, 2042.0], [320.0, 2328.0], [323.0, 1004.0], [322.0, 1284.0], [326.0, 586.0], [325.0, 1250.0], [324.0, 1321.0], [350.0, 1169.0], [351.0, 2070.0], [349.0, 2061.0], [348.0, 2085.0], [347.0, 1326.0], [346.0, 1312.0], [345.0, 1136.0], [344.0, 1414.0], [343.0, 1548.0], [337.0, 1215.0], [336.0, 1229.0], [339.0, 1423.0], [338.0, 1038.0], [342.0, 1384.0], [341.0, 1171.0], [340.0, 547.0], [366.0, 1346.0], [367.0, 1389.0], [365.0, 1347.0], [364.0, 1366.0], [363.0, 985.0], [362.0, 1373.0], [361.0, 2065.0], [360.0, 2077.0], [359.0, 2084.0], [353.0, 1342.0], [352.0, 1059.0], [355.0, 1386.0], [354.0, 1326.0], [358.0, 1144.0], [357.0, 1015.0], [356.0, 2074.0], [382.0, 1998.0], [383.0, 1693.0], [381.0, 1967.0], [380.0, 1204.0], [379.0, 1061.0], [378.0, 1992.0], [377.0, 1055.0], [376.0, 1079.0], [375.0, 1234.0], [369.0, 995.0], [368.0, 1365.0], [371.0, 1021.0], [370.0, 1814.0], [374.0, 1344.0], [373.0, 1325.0], [372.0, 1323.0], [398.0, 1085.0], [399.0, 858.0], [397.0, 1524.0], [396.0, 1097.0], [395.0, 1021.0], [394.0, 1027.0], [393.0, 1784.0], [392.0, 1236.0], [391.0, 1244.0], [385.0, 1978.0], [384.0, 1224.0], [387.0, 1247.0], [386.0, 1202.0], [390.0, 1967.0], [389.0, 1420.0], [388.0, 1965.0], [414.0, 1022.0], [415.0, 1499.0], [413.0, 2296.0], [412.0, 2271.0], [411.0, 2005.0], [410.0, 1073.0], [409.0, 1489.0], [408.0, 1035.0], [407.0, 1466.0], [401.0, 843.0], [400.0, 1037.0], [403.0, 1523.0], [402.0, 959.0], [406.0, 969.0], [405.0, 1196.0], [404.0, 833.0], [430.0, 1317.0], [431.0, 1019.0], [429.0, 776.0], [428.0, 948.0], [427.0, 819.0], [426.0, 1009.0], [425.0, 987.0], [424.0, 1420.0], [423.0, 2285.0], [417.0, 1460.0], [416.0, 2255.0], [419.0, 2290.0], [418.0, 2290.0], [422.0, 1496.0], [421.0, 797.0], [420.0, 1441.0], [446.0, 1150.0], [447.0, 1264.0], [445.0, 1241.0], [444.0, 986.0], [443.0, 1154.0], [442.0, 1163.0], [441.0, 1153.0], [440.0, 1236.0], [439.0, 1257.0], [435.0, 1254.0], [433.0, 1284.0], [432.0, 1017.0], [438.0, 986.0], [456.0, 944.0], [459.0, 999.0], [458.0, 1110.0], [457.0, 1116.0], [454.0, 1174.0], [453.0, 1219.0], [452.0, 1119.0], [451.0, 982.0], [450.0, 1150.0], [449.0, 1729.0], [448.0, 983.0], [479.0, 930.0], [478.0, 1056.8333333333333], [477.0, 1289.25], [473.0, 977.0], [472.0, 978.0], [471.0, 986.0], [470.0, 1012.0], [465.0, 707.75], [464.0, 938.0], [491.0, 856.0], [480.0, 827.0], [500.0, 560.8947368421051], [1.0, 376.0]], "isOverall": false, "label": "Get Settings All", "isController": false}, {"data": [[251.19999999999985, 998.3740000000007]], "isOverall": false, "label": "Get Settings All-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5841.666666666667, "minX": 1.51628766E12, "maxY": 13591.666666666666, "series": [{"data": [[1.51628766E12, 13591.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.51628766E12, 5841.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51628766E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 998.3740000000007, "minX": 1.51628766E12, "maxY": 4834.221999999999, "series": [{"data": [[1.51628766E12, 4834.221999999999]], "isOverall": false, "label": "Get User Info", "isController": false}, {"data": [[1.51628766E12, 998.3740000000007]], "isOverall": false, "label": "Get Settings All", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51628766E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 998.3520000000005, "minX": 1.51628766E12, "maxY": 4834.036000000006, "series": [{"data": [[1.51628766E12, 4834.036000000006]], "isOverall": false, "label": "Get User Info", "isController": false}, {"data": [[1.51628766E12, 998.3520000000005]], "isOverall": false, "label": "Get Settings All", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51628766E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 708.5619999999997, "minX": 1.51628766E12, "maxY": 4491.399999999999, "series": [{"data": [[1.51628766E12, 4491.399999999999]], "isOverall": false, "label": "Get User Info", "isController": false}, {"data": [[1.51628766E12, 708.5619999999997]], "isOverall": false, "label": "Get Settings All", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51628766E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 307.0, "minX": 1.51628766E12, "maxY": 6826.0, "series": [{"data": [[1.51628766E12, 6826.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.51628766E12, 307.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.51628766E12, 5890.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.51628766E12, 6674.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.51628766E12, 6192.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51628766E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2313.5, "minX": 16.0, "maxY": 2313.5, "series": [{"data": [[16.0, 2313.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 16.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2313.5, "minX": 16.0, "maxY": 2313.5, "series": [{"data": [[16.0, 2313.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 16.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.51628766E12, "maxY": 16.666666666666668, "series": [{"data": [[1.51628766E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51628766E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.51628766E12, "maxY": 16.666666666666668, "series": [{"data": [[1.51628766E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.51628766E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.51628766E12, "maxY": 8.333333333333334, "series": [{"data": [[1.51628766E12, 8.333333333333334]], "isOverall": false, "label": "Get User Info-success", "isController": false}, {"data": [[1.51628766E12, 8.333333333333334]], "isOverall": false, "label": "Get Settings All-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.51628766E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
